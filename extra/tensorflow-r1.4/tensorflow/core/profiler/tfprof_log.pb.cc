// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/tfprof_log.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/profiler/tfprof_log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace tfprof {

namespace {

const ::google::protobuf::Descriptor* CodeDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CodeDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* CodeDef_Trace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CodeDef_Trace_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpLogEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpLogEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpLogProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpLogProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfileProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfileProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfileProto_NodesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProfileNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfileNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfileNode_InputsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProfileNode_InputShapesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProfileNode_OutputsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProfileNode_OutputShapesEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProfileNode_SrcOutputIndexEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProfileNode_AttrsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProfileNode_ExecsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ExecProfile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecProfile_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecProfile_AcceleratorExecsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ExecProfile_CpuExecsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ExecProfile_OutputMemoryEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ExecTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tuple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tuple_reflection_ = NULL;
const ::google::protobuf::Descriptor* Memory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Memory_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/profiler/tfprof_log.proto");
  GOOGLE_CHECK(file != NULL);
  CodeDef_descriptor_ = file->message_type(0);
  static const int CodeDef_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeDef, traces_),
  };
  CodeDef_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CodeDef_descriptor_,
      CodeDef::internal_default_instance(),
      CodeDef_offsets_,
      -1,
      -1,
      -1,
      sizeof(CodeDef),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeDef, _internal_metadata_));
  CodeDef_Trace_descriptor_ = CodeDef_descriptor_->nested_type(0);
  static const int CodeDef_Trace_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeDef_Trace, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeDef_Trace, lineno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeDef_Trace, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeDef_Trace, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeDef_Trace, func_start_line_),
  };
  CodeDef_Trace_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CodeDef_Trace_descriptor_,
      CodeDef_Trace::internal_default_instance(),
      CodeDef_Trace_offsets_,
      -1,
      -1,
      -1,
      sizeof(CodeDef_Trace),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeDef_Trace, _internal_metadata_));
  OpLogEntry_descriptor_ = file->message_type(1);
  static const int OpLogEntry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogEntry, float_ops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogEntry, types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogEntry, code_def_),
  };
  OpLogEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpLogEntry_descriptor_,
      OpLogEntry::internal_default_instance(),
      OpLogEntry_offsets_,
      -1,
      -1,
      -1,
      sizeof(OpLogEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogEntry, _internal_metadata_));
  OpLogProto_descriptor_ = file->message_type(2);
  static const int OpLogProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogProto, log_entries_),
  };
  OpLogProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpLogProto_descriptor_,
      OpLogProto::internal_default_instance(),
      OpLogProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(OpLogProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpLogProto, _internal_metadata_));
  ProfileProto_descriptor_ = file->message_type(3);
  static const int ProfileProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileProto, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileProto, has_trace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileProto, steps_),
  };
  ProfileProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProfileProto_descriptor_,
      ProfileProto::internal_default_instance(),
      ProfileProto_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProfileProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileProto, _internal_metadata_));
  ProfileProto_NodesEntry_descriptor_ = ProfileProto_descriptor_->nested_type(0);
  ProfileNode_descriptor_ = file->message_type(4);
  static const int ProfileNode_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, inputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, input_shapes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, outputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, output_shapes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, src_output_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, op_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, canonical_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, host_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, float_ops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, trace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, execs_),
  };
  ProfileNode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProfileNode_descriptor_,
      ProfileNode::internal_default_instance(),
      ProfileNode_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProfileNode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileNode, _internal_metadata_));
  ProfileNode_InputsEntry_descriptor_ = ProfileNode_descriptor_->nested_type(0);
  ProfileNode_InputShapesEntry_descriptor_ = ProfileNode_descriptor_->nested_type(1);
  ProfileNode_OutputsEntry_descriptor_ = ProfileNode_descriptor_->nested_type(2);
  ProfileNode_OutputShapesEntry_descriptor_ = ProfileNode_descriptor_->nested_type(3);
  ProfileNode_SrcOutputIndexEntry_descriptor_ = ProfileNode_descriptor_->nested_type(4);
  ProfileNode_AttrsEntry_descriptor_ = ProfileNode_descriptor_->nested_type(5);
  ProfileNode_ExecsEntry_descriptor_ = ProfileNode_descriptor_->nested_type(6);
  ExecProfile_descriptor_ = file->message_type(5);
  static const int ExecProfile_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, run_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, all_start_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, latest_end_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, accelerator_execs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, cpu_execs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, output_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, devices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, requested_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, peak_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, residual_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, output_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, host_temp_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, host_persistent_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, accelerator_temp_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, accelerator_persistent_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, allocator_bytes_in_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, memory_intialized_),
  };
  ExecProfile_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExecProfile_descriptor_,
      ExecProfile::internal_default_instance(),
      ExecProfile_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExecProfile),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecProfile, _internal_metadata_));
  ExecProfile_AcceleratorExecsEntry_descriptor_ = ExecProfile_descriptor_->nested_type(0);
  ExecProfile_CpuExecsEntry_descriptor_ = ExecProfile_descriptor_->nested_type(1);
  ExecProfile_OutputMemoryEntry_descriptor_ = ExecProfile_descriptor_->nested_type(2);
  ExecTime_descriptor_ = file->message_type(6);
  static const int ExecTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecTime, times_),
  };
  ExecTime_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExecTime_descriptor_,
      ExecTime::internal_default_instance(),
      ExecTime_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExecTime),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecTime, _internal_metadata_));
  Tuple_descriptor_ = file->message_type(7);
  static const int Tuple_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuple, int64_values_),
  };
  Tuple_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Tuple_descriptor_,
      Tuple::internal_default_instance(),
      Tuple_offsets_,
      -1,
      -1,
      -1,
      sizeof(Tuple),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tuple, _internal_metadata_));
  Memory_descriptor_ = file->message_type(8);
  static const int Memory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, ptr_),
  };
  Memory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Memory_descriptor_,
      Memory::internal_default_instance(),
      Memory_offsets_,
      -1,
      -1,
      -1,
      sizeof(Memory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CodeDef_descriptor_, CodeDef::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CodeDef_Trace_descriptor_, CodeDef_Trace::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpLogEntry_descriptor_, OpLogEntry::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpLogProto_descriptor_, OpLogProto::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProfileProto_descriptor_, ProfileProto::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ProfileProto_NodesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int64,
            ::tensorflow::tfprof::ProfileNode,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                ProfileProto_NodesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProfileNode_descriptor_, ProfileNode::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ProfileNode_InputsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::google::protobuf::int64,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            0>::CreateDefaultInstance(
                ProfileNode_InputsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ProfileNode_InputShapesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::tensorflow::tfprof::Tuple,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                ProfileNode_InputShapesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ProfileNode_OutputsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::google::protobuf::int64,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            0>::CreateDefaultInstance(
                ProfileNode_OutputsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ProfileNode_OutputShapesEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::tensorflow::tfprof::Tuple,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                ProfileNode_OutputShapesEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ProfileNode_SrcOutputIndexEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int64,
            ::google::protobuf::int32,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            0>::CreateDefaultInstance(
                ProfileNode_SrcOutputIndexEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ProfileNode_AttrsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::tensorflow::AttrValue,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                ProfileNode_AttrsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ProfileNode_ExecsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int64,
            ::tensorflow::tfprof::ExecProfile,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                ProfileNode_ExecsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExecProfile_descriptor_, ExecProfile::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ExecProfile_AcceleratorExecsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::tensorflow::tfprof::ExecTime,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                ExecProfile_AcceleratorExecsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ExecProfile_CpuExecsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::tensorflow::tfprof::ExecTime,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                ExecProfile_CpuExecsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ExecProfile_OutputMemoryEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::tensorflow::tfprof::Memory,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                ExecProfile_OutputMemoryEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExecTime_descriptor_, ExecTime::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Tuple_descriptor_, Tuple::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Memory_descriptor_, Memory::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  CodeDef_default_instance_.Shutdown();
  delete CodeDef_reflection_;
  CodeDef_Trace_default_instance_.Shutdown();
  delete CodeDef_Trace_reflection_;
  OpLogEntry_default_instance_.Shutdown();
  delete OpLogEntry_reflection_;
  OpLogProto_default_instance_.Shutdown();
  delete OpLogProto_reflection_;
  ProfileProto_default_instance_.Shutdown();
  delete ProfileProto_reflection_;
  ProfileNode_default_instance_.Shutdown();
  delete ProfileNode_reflection_;
  ExecProfile_default_instance_.Shutdown();
  delete ExecProfile_reflection_;
  ExecTime_default_instance_.Shutdown();
  delete ExecTime_reflection_;
  Tuple_default_instance_.Shutdown();
  delete Tuple_reflection_;
  Memory_default_instance_.Shutdown();
  delete Memory_reflection_;
}

void protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tensorflow::protobuf_InitDefaults_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto();
  CodeDef_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CodeDef_Trace_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  OpLogEntry_default_instance_.DefaultConstruct();
  OpLogProto_default_instance_.DefaultConstruct();
  ProfileProto_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ::google::protobuf::internal::GetEmptyString();
  ProfileNode_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ::google::protobuf::internal::GetEmptyString();
  ExecProfile_default_instance_.DefaultConstruct();
  ExecTime_default_instance_.DefaultConstruct();
  Tuple_default_instance_.DefaultConstruct();
  Memory_default_instance_.DefaultConstruct();
  CodeDef_default_instance_.get_mutable()->InitAsDefaultInstance();
  CodeDef_Trace_default_instance_.get_mutable()->InitAsDefaultInstance();
  OpLogEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  OpLogProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  ProfileProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  ProfileNode_default_instance_.get_mutable()->InitAsDefaultInstance();
  ExecProfile_default_instance_.get_mutable()->InitAsDefaultInstance();
  ExecTime_default_instance_.get_mutable()->InitAsDefaultInstance();
  Tuple_default_instance_.get_mutable()->InitAsDefaultInstance();
  Memory_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto_once_);
void protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto_once_,
                 &protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto_impl);
}
void protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n)tensorflow/core/profiler/tfprof_log.pr"
    "oto\022\021tensorflow.tfprof\032*tensorflow/core/"
    "framework/attr_value.proto\"\233\001\n\007CodeDef\0220"
    "\n\006traces\030\001 \003(\0132 .tensorflow.tfprof.CodeD"
    "ef.Trace\032^\n\005Trace\022\014\n\004file\030\001 \001(\t\022\016\n\006linen"
    "o\030\002 \001(\005\022\020\n\010function\030\003 \001(\t\022\014\n\004line\030\004 \001(\t\022"
    "\027\n\017func_start_line\030\005 \001(\005\"j\n\nOpLogEntry\022\014"
    "\n\004name\030\001 \001(\t\022\021\n\tfloat_ops\030\002 \001(\003\022\r\n\005types"
    "\030\003 \003(\t\022,\n\010code_def\030\004 \001(\0132\032.tensorflow.tf"
    "prof.CodeDef\"@\n\nOpLogProto\0222\n\013log_entrie"
    "s\030\001 \003(\0132\035.tensorflow.tfprof.OpLogEntry\"\271"
    "\001\n\014ProfileProto\0229\n\005nodes\030\001 \003(\0132*.tensorf"
    "low.tfprof.ProfileProto.NodesEntry\022\021\n\tha"
    "s_trace\030\002 \001(\010\022\r\n\005steps\030\003 \003(\003\032L\n\nNodesEnt"
    "ry\022\013\n\003key\030\001 \001(\003\022-\n\005value\030\002 \001(\0132\036.tensorf"
    "low.tfprof.ProfileNode:\0028\001\"\323\010\n\013ProfileNo"
    "de\022\014\n\004name\030\001 \001(\t\022\n\n\002op\030\t \001(\t\022\n\n\002id\030\r \001(\003"
    "\022:\n\006inputs\030\002 \003(\0132*.tensorflow.tfprof.Pro"
    "fileNode.InputsEntry\022E\n\014input_shapes\030\020 \003"
    "(\0132/.tensorflow.tfprof.ProfileNode.Input"
    "ShapesEntry\022<\n\007outputs\030\003 \003(\0132+.tensorflo"
    "w.tfprof.ProfileNode.OutputsEntry\022G\n\rout"
    "put_shapes\030\017 \003(\01320.tensorflow.tfprof.Pro"
    "fileNode.OutputShapesEntry\022L\n\020src_output"
    "_index\030\016 \003(\01322.tensorflow.tfprof.Profile"
    "Node.SrcOutputIndexEntry\022\r\n\005shape\030\004 \003(\003\022"
    "\020\n\010op_types\030\005 \003(\t\022\030\n\020canonical_device\030\006 "
    "\001(\t\022\023\n\013host_device\030\007 \001(\t\022\021\n\tfloat_ops\030\010 "
    "\001(\003\022)\n\005trace\030\n \001(\0132\032.tensorflow.tfprof.C"
    "odeDef\0228\n\005attrs\030\013 \003(\0132).tensorflow.tfpro"
    "f.ProfileNode.AttrsEntry\0228\n\005execs\030\014 \003(\0132"
    ").tensorflow.tfprof.ProfileNode.ExecsEnt"
    "ry\032-\n\013InputsEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030"
    "\002 \001(\003:\0028\001\032L\n\020InputShapesEntry\022\013\n\003key\030\001 \001"
    "(\005\022\'\n\005value\030\002 \001(\0132\030.tensorflow.tfprof.Tu"
    "ple:\0028\001\032.\n\014OutputsEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005"
    "value\030\002 \001(\003:\0028\001\032M\n\021OutputShapesEntry\022\013\n\003"
    "key\030\001 \001(\005\022\'\n\005value\030\002 \001(\0132\030.tensorflow.tf"
    "prof.Tuple:\0028\001\0325\n\023SrcOutputIndexEntry\022\013\n"
    "\003key\030\001 \001(\003\022\r\n\005value\030\002 \001(\005:\0028\001\032C\n\nAttrsEn"
    "try\022\013\n\003key\030\001 \001(\t\022$\n\005value\030\002 \001(\0132\025.tensor"
    "flow.AttrValue:\0028\001\032L\n\nExecsEntry\022\013\n\003key\030"
    "\001 \001(\003\022-\n\005value\030\002 \001(\0132\036.tensorflow.tfprof"
    ".ExecProfile:\0028\001\"\311\006\n\013ExecProfile\022\021\n\trun_"
    "count\030\001 \001(\003\022\030\n\020all_start_micros\030\002 \001(\003\022\031\n"
    "\021latest_end_micros\030\003 \001(\003\022O\n\021accelerator_"
    "execs\030\004 \003(\01324.tensorflow.tfprof.ExecProf"
    "ile.AcceleratorExecsEntry\022\?\n\tcpu_execs\030\005"
    " \003(\0132,.tensorflow.tfprof.ExecProfile.Cpu"
    "ExecsEntry\022G\n\routput_memory\030\021 \003(\01320.tens"
    "orflow.tfprof.ExecProfile.OutputMemoryEn"
    "try\022\017\n\007devices\030\006 \003(\t\022\027\n\017requested_bytes\030"
    "\007 \001(\003\022\022\n\npeak_bytes\030\010 \001(\003\022\026\n\016residual_by"
    "tes\030\t \001(\003\022\024\n\014output_bytes\030\n \001(\003\022\027\n\017host_"
    "temp_bytes\030\013 \001(\003\022\035\n\025host_persistent_byte"
    "s\030\014 \001(\003\022\036\n\026accelerator_temp_bytes\030\r \001(\003\022"
    "$\n\034accelerator_persistent_bytes\030\016 \001(\003\022\036\n"
    "\026allocator_bytes_in_use\030\017 \001(\003\022\031\n\021memory_"
    "intialized\030\020 \001(\010\032T\n\025AcceleratorExecsEntr"
    "y\022\013\n\003key\030\001 \001(\t\022*\n\005value\030\002 \001(\0132\033.tensorfl"
    "ow.tfprof.ExecTime:\0028\001\032L\n\rCpuExecsEntry\022"
    "\013\n\003key\030\001 \001(\t\022*\n\005value\030\002 \001(\0132\033.tensorflow"
    ".tfprof.ExecTime:\0028\001\032N\n\021OutputMemoryEntr"
    "y\022\013\n\003key\030\001 \001(\005\022(\n\005value\030\002 \001(\0132\031.tensorfl"
    "ow.tfprof.Memory:\0028\001\"3\n\010ExecTime\022\'\n\005time"
    "s\030\001 \003(\0132\030.tensorflow.tfprof.Tuple\"\035\n\005Tup"
    "le\022\024\n\014int64_values\030\001 \003(\003\"$\n\006Memory\022\r\n\005by"
    "tes\030\001 \001(\003\022\013\n\003ptr\030\002 \001(\004b\006proto3", 2710);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/profiler/tfprof_log.proto", &protobuf_RegisterTypes);
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto_once_);
void protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto_once_,
                 &protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CodeDef_Trace::kFileFieldNumber;
const int CodeDef_Trace::kLinenoFieldNumber;
const int CodeDef_Trace::kFunctionFieldNumber;
const int CodeDef_Trace::kLineFieldNumber;
const int CodeDef_Trace::kFuncStartLineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CodeDef_Trace::CodeDef_Trace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.CodeDef.Trace)
}

void CodeDef_Trace::InitAsDefaultInstance() {
}

CodeDef_Trace::CodeDef_Trace(const CodeDef_Trace& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.CodeDef.Trace)
}

void CodeDef_Trace::SharedCtor() {
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lineno_, 0, reinterpret_cast<char*>(&func_start_line_) -
    reinterpret_cast<char*>(&lineno_) + sizeof(func_start_line_));
  _cached_size_ = 0;
}

CodeDef_Trace::~CodeDef_Trace() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.CodeDef.Trace)
  SharedDtor();
}

void CodeDef_Trace::SharedDtor() {
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CodeDef_Trace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CodeDef_Trace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CodeDef_Trace_descriptor_;
}

const CodeDef_Trace& CodeDef_Trace::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CodeDef_Trace> CodeDef_Trace_default_instance_;

CodeDef_Trace* CodeDef_Trace::New(::google::protobuf::Arena* arena) const {
  CodeDef_Trace* n = new CodeDef_Trace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CodeDef_Trace::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.CodeDef.Trace)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CodeDef_Trace, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CodeDef_Trace*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lineno_, func_start_line_);
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CodeDef_Trace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.CodeDef.Trace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.CodeDef.Trace.file"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lineno;
        break;
      }

      // optional int32 lineno = 2;
      case 2: {
        if (tag == 16) {
         parse_lineno:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineno_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_function;
        break;
      }

      // optional string function = 3;
      case 3: {
        if (tag == 26) {
         parse_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->function().data(), this->function().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.CodeDef.Trace.function"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_line;
        break;
      }

      // optional string line = 4;
      case 4: {
        if (tag == 34) {
         parse_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_line()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->line().data(), this->line().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.CodeDef.Trace.line"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_func_start_line;
        break;
      }

      // optional int32 func_start_line = 5;
      case 5: {
        if (tag == 40) {
         parse_func_start_line:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &func_start_line_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.CodeDef.Trace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.CodeDef.Trace)
  return false;
#undef DO_
}

void CodeDef_Trace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.CodeDef.Trace)
  // optional string file = 1;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.CodeDef.Trace.file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file(), output);
  }

  // optional int32 lineno = 2;
  if (this->lineno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lineno(), output);
  }

  // optional string function = 3;
  if (this->function().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.CodeDef.Trace.function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->function(), output);
  }

  // optional string line = 4;
  if (this->line().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->line().data(), this->line().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.CodeDef.Trace.line");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->line(), output);
  }

  // optional int32 func_start_line = 5;
  if (this->func_start_line() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->func_start_line(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.CodeDef.Trace)
}

::google::protobuf::uint8* CodeDef_Trace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.CodeDef.Trace)
  // optional string file = 1;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.CodeDef.Trace.file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file(), target);
  }

  // optional int32 lineno = 2;
  if (this->lineno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lineno(), target);
  }

  // optional string function = 3;
  if (this->function().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.CodeDef.Trace.function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->function(), target);
  }

  // optional string line = 4;
  if (this->line().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->line().data(), this->line().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.CodeDef.Trace.line");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->line(), target);
  }

  // optional int32 func_start_line = 5;
  if (this->func_start_line() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->func_start_line(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.CodeDef.Trace)
  return target;
}

size_t CodeDef_Trace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.CodeDef.Trace)
  size_t total_size = 0;

  // optional string file = 1;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  // optional int32 lineno = 2;
  if (this->lineno() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lineno());
  }

  // optional string function = 3;
  if (this->function().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->function());
  }

  // optional string line = 4;
  if (this->line().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->line());
  }

  // optional int32 func_start_line = 5;
  if (this->func_start_line() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->func_start_line());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CodeDef_Trace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.CodeDef.Trace)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CodeDef_Trace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CodeDef_Trace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.CodeDef.Trace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.CodeDef.Trace)
    UnsafeMergeFrom(*source);
  }
}

void CodeDef_Trace::MergeFrom(const CodeDef_Trace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.CodeDef.Trace)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CodeDef_Trace::UnsafeMergeFrom(const CodeDef_Trace& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.lineno() != 0) {
    set_lineno(from.lineno());
  }
  if (from.function().size() > 0) {

    function_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.function_);
  }
  if (from.line().size() > 0) {

    line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_);
  }
  if (from.func_start_line() != 0) {
    set_func_start_line(from.func_start_line());
  }
}

void CodeDef_Trace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.CodeDef.Trace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CodeDef_Trace::CopyFrom(const CodeDef_Trace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.CodeDef.Trace)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CodeDef_Trace::IsInitialized() const {

  return true;
}

void CodeDef_Trace::Swap(CodeDef_Trace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CodeDef_Trace::InternalSwap(CodeDef_Trace* other) {
  file_.Swap(&other->file_);
  std::swap(lineno_, other->lineno_);
  function_.Swap(&other->function_);
  line_.Swap(&other->line_);
  std::swap(func_start_line_, other->func_start_line_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CodeDef_Trace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CodeDef_Trace_descriptor_;
  metadata.reflection = CodeDef_Trace_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CodeDef::kTracesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CodeDef::CodeDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.CodeDef)
}

void CodeDef::InitAsDefaultInstance() {
}

CodeDef::CodeDef(const CodeDef& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.CodeDef)
}

void CodeDef::SharedCtor() {
  _cached_size_ = 0;
}

CodeDef::~CodeDef() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.CodeDef)
  SharedDtor();
}

void CodeDef::SharedDtor() {
}

void CodeDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CodeDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CodeDef_descriptor_;
}

const CodeDef& CodeDef::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CodeDef> CodeDef_default_instance_;

CodeDef* CodeDef::New(::google::protobuf::Arena* arena) const {
  CodeDef* n = new CodeDef;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CodeDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.CodeDef)
  traces_.Clear();
}

bool CodeDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.CodeDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.tfprof.CodeDef.Trace traces = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_traces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_traces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_traces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.CodeDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.CodeDef)
  return false;
#undef DO_
}

void CodeDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.CodeDef)
  // repeated .tensorflow.tfprof.CodeDef.Trace traces = 1;
  for (unsigned int i = 0, n = this->traces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->traces(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.CodeDef)
}

::google::protobuf::uint8* CodeDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.CodeDef)
  // repeated .tensorflow.tfprof.CodeDef.Trace traces = 1;
  for (unsigned int i = 0, n = this->traces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->traces(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.CodeDef)
  return target;
}

size_t CodeDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.CodeDef)
  size_t total_size = 0;

  // repeated .tensorflow.tfprof.CodeDef.Trace traces = 1;
  {
    unsigned int count = this->traces_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traces(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CodeDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.CodeDef)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CodeDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CodeDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.CodeDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.CodeDef)
    UnsafeMergeFrom(*source);
  }
}

void CodeDef::MergeFrom(const CodeDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.CodeDef)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CodeDef::UnsafeMergeFrom(const CodeDef& from) {
  GOOGLE_DCHECK(&from != this);
  traces_.MergeFrom(from.traces_);
}

void CodeDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.CodeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CodeDef::CopyFrom(const CodeDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.CodeDef)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CodeDef::IsInitialized() const {

  return true;
}

void CodeDef::Swap(CodeDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CodeDef::InternalSwap(CodeDef* other) {
  traces_.UnsafeArenaSwap(&other->traces_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CodeDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CodeDef_descriptor_;
  metadata.reflection = CodeDef_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CodeDef_Trace

// optional string file = 1;
void CodeDef_Trace::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CodeDef_Trace::file() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.CodeDef.Trace.file)
  return file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CodeDef_Trace::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.CodeDef.Trace.file)
}
void CodeDef_Trace::set_file(const char* value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.CodeDef.Trace.file)
}
void CodeDef_Trace::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.CodeDef.Trace.file)
}
::std::string* CodeDef_Trace::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.CodeDef.Trace.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CodeDef_Trace::release_file() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.CodeDef.Trace.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CodeDef_Trace::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.CodeDef.Trace.file)
}

// optional int32 lineno = 2;
void CodeDef_Trace::clear_lineno() {
  lineno_ = 0;
}
::google::protobuf::int32 CodeDef_Trace::lineno() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.CodeDef.Trace.lineno)
  return lineno_;
}
void CodeDef_Trace::set_lineno(::google::protobuf::int32 value) {
  
  lineno_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.CodeDef.Trace.lineno)
}

// optional string function = 3;
void CodeDef_Trace::clear_function() {
  function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CodeDef_Trace::function() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.CodeDef.Trace.function)
  return function_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CodeDef_Trace::set_function(const ::std::string& value) {
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.CodeDef.Trace.function)
}
void CodeDef_Trace::set_function(const char* value) {
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.CodeDef.Trace.function)
}
void CodeDef_Trace::set_function(const char* value, size_t size) {
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.CodeDef.Trace.function)
}
::std::string* CodeDef_Trace::mutable_function() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.CodeDef.Trace.function)
  return function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CodeDef_Trace::release_function() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.CodeDef.Trace.function)
  
  return function_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CodeDef_Trace::set_allocated_function(::std::string* function) {
  if (function != NULL) {
    
  } else {
    
  }
  function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.CodeDef.Trace.function)
}

// optional string line = 4;
void CodeDef_Trace::clear_line() {
  line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CodeDef_Trace::line() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.CodeDef.Trace.line)
  return line_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CodeDef_Trace::set_line(const ::std::string& value) {
  
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.CodeDef.Trace.line)
}
void CodeDef_Trace::set_line(const char* value) {
  
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.CodeDef.Trace.line)
}
void CodeDef_Trace::set_line(const char* value, size_t size) {
  
  line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.CodeDef.Trace.line)
}
::std::string* CodeDef_Trace::mutable_line() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.CodeDef.Trace.line)
  return line_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CodeDef_Trace::release_line() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.CodeDef.Trace.line)
  
  return line_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CodeDef_Trace::set_allocated_line(::std::string* line) {
  if (line != NULL) {
    
  } else {
    
  }
  line_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.CodeDef.Trace.line)
}

// optional int32 func_start_line = 5;
void CodeDef_Trace::clear_func_start_line() {
  func_start_line_ = 0;
}
::google::protobuf::int32 CodeDef_Trace::func_start_line() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.CodeDef.Trace.func_start_line)
  return func_start_line_;
}
void CodeDef_Trace::set_func_start_line(::google::protobuf::int32 value) {
  
  func_start_line_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.CodeDef.Trace.func_start_line)
}

inline const CodeDef_Trace* CodeDef_Trace::internal_default_instance() {
  return &CodeDef_Trace_default_instance_.get();
}
// -------------------------------------------------------------------

// CodeDef

// repeated .tensorflow.tfprof.CodeDef.Trace traces = 1;
int CodeDef::traces_size() const {
  return traces_.size();
}
void CodeDef::clear_traces() {
  traces_.Clear();
}
const ::tensorflow::tfprof::CodeDef_Trace& CodeDef::traces(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.CodeDef.traces)
  return traces_.Get(index);
}
::tensorflow::tfprof::CodeDef_Trace* CodeDef::mutable_traces(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.CodeDef.traces)
  return traces_.Mutable(index);
}
::tensorflow::tfprof::CodeDef_Trace* CodeDef::add_traces() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.CodeDef.traces)
  return traces_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::CodeDef_Trace >*
CodeDef::mutable_traces() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.CodeDef.traces)
  return &traces_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::CodeDef_Trace >&
CodeDef::traces() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.CodeDef.traces)
  return traces_;
}

inline const CodeDef* CodeDef::internal_default_instance() {
  return &CodeDef_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpLogEntry::kNameFieldNumber;
const int OpLogEntry::kFloatOpsFieldNumber;
const int OpLogEntry::kTypesFieldNumber;
const int OpLogEntry::kCodeDefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpLogEntry::OpLogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.OpLogEntry)
}

void OpLogEntry::InitAsDefaultInstance() {
  code_def_ = const_cast< ::tensorflow::tfprof::CodeDef*>(
      ::tensorflow::tfprof::CodeDef::internal_default_instance());
}

OpLogEntry::OpLogEntry(const OpLogEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.OpLogEntry)
}

void OpLogEntry::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_def_ = NULL;
  float_ops_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

OpLogEntry::~OpLogEntry() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.OpLogEntry)
  SharedDtor();
}

void OpLogEntry::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &OpLogEntry_default_instance_.get()) {
    delete code_def_;
  }
}

void OpLogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpLogEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpLogEntry_descriptor_;
}

const OpLogEntry& OpLogEntry::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OpLogEntry> OpLogEntry_default_instance_;

OpLogEntry* OpLogEntry::New(::google::protobuf::Arena* arena) const {
  OpLogEntry* n = new OpLogEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.OpLogEntry)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  float_ops_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && code_def_ != NULL) delete code_def_;
  code_def_ = NULL;
  types_.Clear();
}

bool OpLogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.OpLogEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.OpLogEntry.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_float_ops;
        break;
      }

      // optional int64 float_ops = 2;
      case 2: {
        if (tag == 16) {
         parse_float_ops:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &float_ops_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_types;
        break;
      }

      // repeated string types = 3;
      case 3: {
        if (tag == 26) {
         parse_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_types()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->types(this->types_size() - 1).data(),
            this->types(this->types_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.OpLogEntry.types"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_types;
        if (input->ExpectTag(34)) goto parse_code_def;
        break;
      }

      // optional .tensorflow.tfprof.CodeDef code_def = 4;
      case 4: {
        if (tag == 34) {
         parse_code_def:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_code_def()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.OpLogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.OpLogEntry)
  return false;
#undef DO_
}

void OpLogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.OpLogEntry)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OpLogEntry.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int64 float_ops = 2;
  if (this->float_ops() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->float_ops(), output);
  }

  // repeated string types = 3;
  for (int i = 0; i < this->types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->types(i).data(), this->types(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OpLogEntry.types");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->types(i), output);
  }

  // optional .tensorflow.tfprof.CodeDef code_def = 4;
  if (this->has_code_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->code_def_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.OpLogEntry)
}

::google::protobuf::uint8* OpLogEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.OpLogEntry)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OpLogEntry.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 float_ops = 2;
  if (this->float_ops() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->float_ops(), target);
  }

  // repeated string types = 3;
  for (int i = 0; i < this->types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->types(i).data(), this->types(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.OpLogEntry.types");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->types(i), target);
  }

  // optional .tensorflow.tfprof.CodeDef code_def = 4;
  if (this->has_code_def()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->code_def_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.OpLogEntry)
  return target;
}

size_t OpLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.OpLogEntry)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int64 float_ops = 2;
  if (this->float_ops() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->float_ops());
  }

  // optional .tensorflow.tfprof.CodeDef code_def = 4;
  if (this->has_code_def()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->code_def_);
  }

  // repeated string types = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->types_size());
  for (int i = 0; i < this->types_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->types(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpLogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.OpLogEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpLogEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpLogEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.OpLogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.OpLogEntry)
    UnsafeMergeFrom(*source);
  }
}

void OpLogEntry::MergeFrom(const OpLogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.OpLogEntry)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OpLogEntry::UnsafeMergeFrom(const OpLogEntry& from) {
  GOOGLE_DCHECK(&from != this);
  types_.UnsafeMergeFrom(from.types_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.float_ops() != 0) {
    set_float_ops(from.float_ops());
  }
  if (from.has_code_def()) {
    mutable_code_def()->::tensorflow::tfprof::CodeDef::MergeFrom(from.code_def());
  }
}

void OpLogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.OpLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpLogEntry::CopyFrom(const OpLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.OpLogEntry)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OpLogEntry::IsInitialized() const {

  return true;
}

void OpLogEntry::Swap(OpLogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpLogEntry::InternalSwap(OpLogEntry* other) {
  name_.Swap(&other->name_);
  std::swap(float_ops_, other->float_ops_);
  types_.UnsafeArenaSwap(&other->types_);
  std::swap(code_def_, other->code_def_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpLogEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpLogEntry_descriptor_;
  metadata.reflection = OpLogEntry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpLogEntry

// optional string name = 1;
void OpLogEntry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OpLogEntry::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OpLogEntry.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OpLogEntry::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OpLogEntry.name)
}
void OpLogEntry::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OpLogEntry.name)
}
void OpLogEntry::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OpLogEntry.name)
}
::std::string* OpLogEntry::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OpLogEntry.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OpLogEntry::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.OpLogEntry.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OpLogEntry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.OpLogEntry.name)
}

// optional int64 float_ops = 2;
void OpLogEntry::clear_float_ops() {
  float_ops_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OpLogEntry::float_ops() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OpLogEntry.float_ops)
  return float_ops_;
}
void OpLogEntry::set_float_ops(::google::protobuf::int64 value) {
  
  float_ops_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OpLogEntry.float_ops)
}

// repeated string types = 3;
int OpLogEntry::types_size() const {
  return types_.size();
}
void OpLogEntry::clear_types() {
  types_.Clear();
}
const ::std::string& OpLogEntry::types(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OpLogEntry.types)
  return types_.Get(index);
}
::std::string* OpLogEntry::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OpLogEntry.types)
  return types_.Mutable(index);
}
void OpLogEntry::set_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.OpLogEntry.types)
  types_.Mutable(index)->assign(value);
}
void OpLogEntry::set_types(int index, const char* value) {
  types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.OpLogEntry.types)
}
void OpLogEntry::set_types(int index, const char* value, size_t size) {
  types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.OpLogEntry.types)
}
::std::string* OpLogEntry::add_types() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.OpLogEntry.types)
  return types_.Add();
}
void OpLogEntry::add_types(const ::std::string& value) {
  types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OpLogEntry.types)
}
void OpLogEntry::add_types(const char* value) {
  types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.OpLogEntry.types)
}
void OpLogEntry::add_types(const char* value, size_t size) {
  types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.OpLogEntry.types)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
OpLogEntry::types() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OpLogEntry.types)
  return types_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
OpLogEntry::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OpLogEntry.types)
  return &types_;
}

// optional .tensorflow.tfprof.CodeDef code_def = 4;
bool OpLogEntry::has_code_def() const {
  return this != internal_default_instance() && code_def_ != NULL;
}
void OpLogEntry::clear_code_def() {
  if (GetArenaNoVirtual() == NULL && code_def_ != NULL) delete code_def_;
  code_def_ = NULL;
}
const ::tensorflow::tfprof::CodeDef& OpLogEntry::code_def() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OpLogEntry.code_def)
  return code_def_ != NULL ? *code_def_
                         : *::tensorflow::tfprof::CodeDef::internal_default_instance();
}
::tensorflow::tfprof::CodeDef* OpLogEntry::mutable_code_def() {
  
  if (code_def_ == NULL) {
    code_def_ = new ::tensorflow::tfprof::CodeDef;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OpLogEntry.code_def)
  return code_def_;
}
::tensorflow::tfprof::CodeDef* OpLogEntry::release_code_def() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.OpLogEntry.code_def)
  
  ::tensorflow::tfprof::CodeDef* temp = code_def_;
  code_def_ = NULL;
  return temp;
}
void OpLogEntry::set_allocated_code_def(::tensorflow::tfprof::CodeDef* code_def) {
  delete code_def_;
  code_def_ = code_def;
  if (code_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.OpLogEntry.code_def)
}

inline const OpLogEntry* OpLogEntry::internal_default_instance() {
  return &OpLogEntry_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpLogProto::kLogEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpLogProto::OpLogProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.OpLogProto)
}

void OpLogProto::InitAsDefaultInstance() {
}

OpLogProto::OpLogProto(const OpLogProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.OpLogProto)
}

void OpLogProto::SharedCtor() {
  _cached_size_ = 0;
}

OpLogProto::~OpLogProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.OpLogProto)
  SharedDtor();
}

void OpLogProto::SharedDtor() {
}

void OpLogProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpLogProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpLogProto_descriptor_;
}

const OpLogProto& OpLogProto::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OpLogProto> OpLogProto_default_instance_;

OpLogProto* OpLogProto::New(::google::protobuf::Arena* arena) const {
  OpLogProto* n = new OpLogProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpLogProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.OpLogProto)
  log_entries_.Clear();
}

bool OpLogProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.OpLogProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.tfprof.OpLogEntry log_entries = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_log_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_log_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_log_entries;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.OpLogProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.OpLogProto)
  return false;
#undef DO_
}

void OpLogProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.OpLogProto)
  // repeated .tensorflow.tfprof.OpLogEntry log_entries = 1;
  for (unsigned int i = 0, n = this->log_entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->log_entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.OpLogProto)
}

::google::protobuf::uint8* OpLogProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.OpLogProto)
  // repeated .tensorflow.tfprof.OpLogEntry log_entries = 1;
  for (unsigned int i = 0, n = this->log_entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->log_entries(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.OpLogProto)
  return target;
}

size_t OpLogProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.OpLogProto)
  size_t total_size = 0;

  // repeated .tensorflow.tfprof.OpLogEntry log_entries = 1;
  {
    unsigned int count = this->log_entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_entries(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpLogProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.OpLogProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpLogProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpLogProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.OpLogProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.OpLogProto)
    UnsafeMergeFrom(*source);
  }
}

void OpLogProto::MergeFrom(const OpLogProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.OpLogProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OpLogProto::UnsafeMergeFrom(const OpLogProto& from) {
  GOOGLE_DCHECK(&from != this);
  log_entries_.MergeFrom(from.log_entries_);
}

void OpLogProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.OpLogProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpLogProto::CopyFrom(const OpLogProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.OpLogProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OpLogProto::IsInitialized() const {

  return true;
}

void OpLogProto::Swap(OpLogProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpLogProto::InternalSwap(OpLogProto* other) {
  log_entries_.UnsafeArenaSwap(&other->log_entries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpLogProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpLogProto_descriptor_;
  metadata.reflection = OpLogProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpLogProto

// repeated .tensorflow.tfprof.OpLogEntry log_entries = 1;
int OpLogProto::log_entries_size() const {
  return log_entries_.size();
}
void OpLogProto::clear_log_entries() {
  log_entries_.Clear();
}
const ::tensorflow::tfprof::OpLogEntry& OpLogProto::log_entries(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.OpLogProto.log_entries)
  return log_entries_.Get(index);
}
::tensorflow::tfprof::OpLogEntry* OpLogProto::mutable_log_entries(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.OpLogProto.log_entries)
  return log_entries_.Mutable(index);
}
::tensorflow::tfprof::OpLogEntry* OpLogProto::add_log_entries() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.OpLogProto.log_entries)
  return log_entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::OpLogEntry >*
OpLogProto::mutable_log_entries() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.OpLogProto.log_entries)
  return &log_entries_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::OpLogEntry >&
OpLogProto::log_entries() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.OpLogProto.log_entries)
  return log_entries_;
}

inline const OpLogProto* OpLogProto::internal_default_instance() {
  return &OpLogProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfileProto::kNodesFieldNumber;
const int ProfileProto::kHasTraceFieldNumber;
const int ProfileProto::kStepsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfileProto::ProfileProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.ProfileProto)
}

void ProfileProto::InitAsDefaultInstance() {
}

ProfileProto::ProfileProto(const ProfileProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.ProfileProto)
}

void ProfileProto::SharedCtor() {
  nodes_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  nodes_.SetEntryDescriptor(
      &::tensorflow::tfprof::ProfileProto_NodesEntry_descriptor_);
  has_trace_ = false;
  _cached_size_ = 0;
}

ProfileProto::~ProfileProto() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.ProfileProto)
  SharedDtor();
}

void ProfileProto::SharedDtor() {
}

void ProfileProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfileProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfileProto_descriptor_;
}

const ProfileProto& ProfileProto::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ProfileProto> ProfileProto_default_instance_;

ProfileProto* ProfileProto::New(::google::protobuf::Arena* arena) const {
  ProfileProto* n = new ProfileProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfileProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.ProfileProto)
  has_trace_ = false;
  nodes_.Clear();
  steps_.Clear();
}

bool ProfileProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.ProfileProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int64, .tensorflow.tfprof.ProfileNode> nodes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nodes:
          ProfileProto_NodesEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode > > parser(&nodes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_nodes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_has_trace;
        break;
      }

      // optional bool has_trace = 2;
      case 2: {
        if (tag == 16) {
         parse_has_trace:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_trace_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_steps;
        break;
      }

      // repeated int64 steps = 3;
      case 3: {
        if (tag == 26) {
         parse_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_steps())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26, input, this->mutable_steps())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.ProfileProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.ProfileProto)
  return false;
#undef DO_
}

void ProfileProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.ProfileProto)
  // map<int64, .tensorflow.tfprof.ProfileNode> nodes = 1;
  if (!this->nodes().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->nodes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->nodes().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >::const_iterator
          it = this->nodes().begin();
          it != this->nodes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ProfileProto_NodesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(nodes_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileProto_NodesEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >::const_iterator
          it = this->nodes().begin();
          it != this->nodes().end(); ++it) {
        entry.reset(nodes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  // optional bool has_trace = 2;
  if (this->has_trace() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->has_trace(), output);
  }

  // repeated int64 steps = 3;
  if (this->steps_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_steps_cached_byte_size_);
  }
  for (int i = 0; i < this->steps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->steps(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.ProfileProto)
}

::google::protobuf::uint8* ProfileProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.ProfileProto)
  // map<int64, .tensorflow.tfprof.ProfileNode> nodes = 1;
  if (!this->nodes().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->nodes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->nodes().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >::const_iterator
          it = this->nodes().begin();
          it != this->nodes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ProfileProto_NodesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(nodes_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileProto_NodesEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >::const_iterator
          it = this->nodes().begin();
          it != this->nodes().end(); ++it) {
        entry.reset(nodes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  // optional bool has_trace = 2;
  if (this->has_trace() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->has_trace(), target);
  }

  // repeated int64 steps = 3;
  if (this->steps_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _steps_cached_byte_size_, target);
  }
  for (int i = 0; i < this->steps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->steps(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.ProfileProto)
  return target;
}

size_t ProfileProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.ProfileProto)
  size_t total_size = 0;

  // optional bool has_trace = 2;
  if (this->has_trace() != 0) {
    total_size += 1 + 1;
  }

  // map<int64, .tensorflow.tfprof.ProfileNode> nodes = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->nodes_size());
  {
    ::google::protobuf::scoped_ptr<ProfileProto_NodesEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >::const_iterator
        it = this->nodes().begin();
        it != this->nodes().end(); ++it) {
      entry.reset(nodes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated int64 steps = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->steps_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->steps(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _steps_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfileProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.ProfileProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProfileProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfileProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.ProfileProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.ProfileProto)
    UnsafeMergeFrom(*source);
  }
}

void ProfileProto::MergeFrom(const ProfileProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.ProfileProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ProfileProto::UnsafeMergeFrom(const ProfileProto& from) {
  GOOGLE_DCHECK(&from != this);
  nodes_.MergeFrom(from.nodes_);
  steps_.UnsafeMergeFrom(from.steps_);
  if (from.has_trace() != 0) {
    set_has_trace(from.has_trace());
  }
}

void ProfileProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.ProfileProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileProto::CopyFrom(const ProfileProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.ProfileProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ProfileProto::IsInitialized() const {

  return true;
}

void ProfileProto::Swap(ProfileProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfileProto::InternalSwap(ProfileProto* other) {
  nodes_.Swap(&other->nodes_);
  std::swap(has_trace_, other->has_trace_);
  steps_.UnsafeArenaSwap(&other->steps_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProfileProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfileProto_descriptor_;
  metadata.reflection = ProfileProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProfileProto

// map<int64, .tensorflow.tfprof.ProfileNode> nodes = 1;
int ProfileProto::nodes_size() const {
  return nodes_.size();
}
void ProfileProto::clear_nodes() {
  nodes_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >&
ProfileProto::nodes() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ProfileProto.nodes)
  return nodes_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ProfileNode >*
ProfileProto::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ProfileProto.nodes)
  return nodes_.MutableMap();
}

// optional bool has_trace = 2;
void ProfileProto::clear_has_trace() {
  has_trace_ = false;
}
bool ProfileProto::has_trace() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileProto.has_trace)
  return has_trace_;
}
void ProfileProto::set_has_trace(bool value) {
  
  has_trace_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileProto.has_trace)
}

// repeated int64 steps = 3;
int ProfileProto::steps_size() const {
  return steps_.size();
}
void ProfileProto::clear_steps() {
  steps_.Clear();
}
::google::protobuf::int64 ProfileProto::steps(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileProto.steps)
  return steps_.Get(index);
}
void ProfileProto::set_steps(int index, ::google::protobuf::int64 value) {
  steps_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileProto.steps)
}
void ProfileProto::add_steps(::google::protobuf::int64 value) {
  steps_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.ProfileProto.steps)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ProfileProto::steps() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.ProfileProto.steps)
  return steps_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ProfileProto::mutable_steps() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.ProfileProto.steps)
  return &steps_;
}

inline const ProfileProto* ProfileProto::internal_default_instance() {
  return &ProfileProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfileNode::kNameFieldNumber;
const int ProfileNode::kOpFieldNumber;
const int ProfileNode::kIdFieldNumber;
const int ProfileNode::kInputsFieldNumber;
const int ProfileNode::kInputShapesFieldNumber;
const int ProfileNode::kOutputsFieldNumber;
const int ProfileNode::kOutputShapesFieldNumber;
const int ProfileNode::kSrcOutputIndexFieldNumber;
const int ProfileNode::kShapeFieldNumber;
const int ProfileNode::kOpTypesFieldNumber;
const int ProfileNode::kCanonicalDeviceFieldNumber;
const int ProfileNode::kHostDeviceFieldNumber;
const int ProfileNode::kFloatOpsFieldNumber;
const int ProfileNode::kTraceFieldNumber;
const int ProfileNode::kAttrsFieldNumber;
const int ProfileNode::kExecsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfileNode::ProfileNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.ProfileNode)
}

void ProfileNode::InitAsDefaultInstance() {
  trace_ = const_cast< ::tensorflow::tfprof::CodeDef*>(
      ::tensorflow::tfprof::CodeDef::internal_default_instance());
}

ProfileNode::ProfileNode(const ProfileNode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.ProfileNode)
}

void ProfileNode::SharedCtor() {
  inputs_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  inputs_.SetEntryDescriptor(
      &::tensorflow::tfprof::ProfileNode_InputsEntry_descriptor_);
  input_shapes_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  input_shapes_.SetEntryDescriptor(
      &::tensorflow::tfprof::ProfileNode_InputShapesEntry_descriptor_);
  outputs_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  outputs_.SetEntryDescriptor(
      &::tensorflow::tfprof::ProfileNode_OutputsEntry_descriptor_);
  output_shapes_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  output_shapes_.SetEntryDescriptor(
      &::tensorflow::tfprof::ProfileNode_OutputShapesEntry_descriptor_);
  src_output_index_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  src_output_index_.SetEntryDescriptor(
      &::tensorflow::tfprof::ProfileNode_SrcOutputIndexEntry_descriptor_);
  attrs_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  attrs_.SetEntryDescriptor(
      &::tensorflow::tfprof::ProfileNode_AttrsEntry_descriptor_);
  execs_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  execs_.SetEntryDescriptor(
      &::tensorflow::tfprof::ProfileNode_ExecsEntry_descriptor_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonical_device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_ = NULL;
  ::memset(&id_, 0, reinterpret_cast<char*>(&float_ops_) -
    reinterpret_cast<char*>(&id_) + sizeof(float_ops_));
  _cached_size_ = 0;
}

ProfileNode::~ProfileNode() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.ProfileNode)
  SharedDtor();
}

void ProfileNode::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canonical_device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &ProfileNode_default_instance_.get()) {
    delete trace_;
  }
}

void ProfileNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfileNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfileNode_descriptor_;
}

const ProfileNode& ProfileNode::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ProfileNode> ProfileNode_default_instance_;

ProfileNode* ProfileNode::New(::google::protobuf::Arena* arena) const {
  ProfileNode* n = new ProfileNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfileNode::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.ProfileNode)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  canonical_device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  float_ops_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && trace_ != NULL) delete trace_;
  trace_ = NULL;
  inputs_.Clear();
  input_shapes_.Clear();
  outputs_.Clear();
  output_shapes_.Clear();
  src_output_index_.Clear();
  shape_.Clear();
  op_types_.Clear();
  attrs_.Clear();
  execs_.Clear();
}

bool ProfileNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.ProfileNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.ProfileNode.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_inputs;
        break;
      }

      // map<int32, int64> inputs = 2;
      case 2: {
        if (tag == 18) {
         parse_inputs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_inputs:
          ProfileNode_InputsEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 > > parser(&inputs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_inputs;
        if (input->ExpectTag(26)) goto parse_loop_outputs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int32, int64> outputs = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_outputs:
          ProfileNode_OutputsEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::google::protobuf::int64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 > > parser(&outputs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_outputs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_shape;
        break;
      }

      // repeated int64 shape = 4;
      case 4: {
        if (tag == 34) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_shape())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 34, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_op_types;
        break;
      }

      // repeated string op_types = 5;
      case 5: {
        if (tag == 42) {
         parse_op_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_op_types()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op_types(this->op_types_size() - 1).data(),
            this->op_types(this->op_types_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.ProfileNode.op_types"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_op_types;
        if (input->ExpectTag(50)) goto parse_canonical_device;
        break;
      }

      // optional string canonical_device = 6;
      case 6: {
        if (tag == 50) {
         parse_canonical_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canonical_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->canonical_device().data(), this->canonical_device().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.ProfileNode.canonical_device"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_host_device;
        break;
      }

      // optional string host_device = 7;
      case 7: {
        if (tag == 58) {
         parse_host_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host_device().data(), this->host_device().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.ProfileNode.host_device"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_float_ops;
        break;
      }

      // optional int64 float_ops = 8;
      case 8: {
        if (tag == 64) {
         parse_float_ops:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &float_ops_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_op;
        break;
      }

      // optional string op = 9;
      case 9: {
        if (tag == 74) {
         parse_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->op().data(), this->op().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.ProfileNode.op"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_trace;
        break;
      }

      // optional .tensorflow.tfprof.CodeDef trace = 10;
      case 10: {
        if (tag == 82) {
         parse_trace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_attrs;
        break;
      }

      // map<string, .tensorflow.AttrValue> attrs = 11;
      case 11: {
        if (tag == 90) {
         parse_attrs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_attrs:
          ProfileNode_AttrsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::tensorflow::AttrValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue > > parser(&attrs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.ProfileNode.AttrsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_attrs;
        if (input->ExpectTag(98)) goto parse_loop_execs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int64, .tensorflow.tfprof.ExecProfile> execs = 12;
      case 12: {
        if (tag == 98) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_execs:
          ProfileNode_ExecsEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile > > parser(&execs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_execs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(104)) goto parse_id;
        break;
      }

      // optional int64 id = 13;
      case 13: {
        if (tag == 104) {
         parse_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_src_output_index;
        break;
      }

      // map<int64, int32> src_output_index = 14;
      case 14: {
        if (tag == 114) {
         parse_src_output_index:
          DO_(input->IncrementRecursionDepth());
         parse_loop_src_output_index:
          ProfileNode_SrcOutputIndexEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int64, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 > > parser(&src_output_index_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_src_output_index;
        if (input->ExpectTag(122)) goto parse_loop_output_shapes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int32, .tensorflow.tfprof.Tuple> output_shapes = 15;
      case 15: {
        if (tag == 122) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_output_shapes:
          ProfileNode_OutputShapesEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::tensorflow::tfprof::Tuple,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple > > parser(&output_shapes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_output_shapes;
        if (input->ExpectTag(130)) goto parse_loop_input_shapes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<int32, .tensorflow.tfprof.Tuple> input_shapes = 16;
      case 16: {
        if (tag == 130) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_input_shapes:
          ProfileNode_InputShapesEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::tensorflow::tfprof::Tuple,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple > > parser(&input_shapes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_loop_input_shapes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.ProfileNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.ProfileNode)
  return false;
#undef DO_
}

void ProfileNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.ProfileNode)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // map<int32, int64> inputs = 2;
  if (!this->inputs().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->inputs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->inputs().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_InputsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(inputs_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_InputsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it) {
        entry.reset(inputs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    }
  }

  // map<int32, int64> outputs = 3;
  if (!this->outputs().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->outputs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->outputs().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
          it = this->outputs().begin();
          it != this->outputs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_OutputsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(outputs_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_OutputsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
          it = this->outputs().begin();
          it != this->outputs().end(); ++it) {
        entry.reset(outputs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // repeated int64 shape = 4;
  if (this->shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_shape_cached_byte_size_);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->shape(i), output);
  }

  // repeated string op_types = 5;
  for (int i = 0; i < this->op_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_types(i).data(), this->op_types(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.op_types");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->op_types(i), output);
  }

  // optional string canonical_device = 6;
  if (this->canonical_device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->canonical_device().data(), this->canonical_device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.canonical_device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->canonical_device(), output);
  }

  // optional string host_device = 7;
  if (this->host_device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_device().data(), this->host_device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.host_device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->host_device(), output);
  }

  // optional int64 float_ops = 8;
  if (this->float_ops() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->float_ops(), output);
  }

  // optional string op = 9;
  if (this->op().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op().data(), this->op().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.op");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->op(), output);
  }

  // optional .tensorflow.tfprof.CodeDef trace = 10;
  if (this->has_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->trace_, output);
  }

  // map<string, .tensorflow.AttrValue> attrs = 11;
  if (!this->attrs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.ProfileNode.AttrsEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->attrs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attrs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_AttrsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attrs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_AttrsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it) {
        entry.reset(attrs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int64, .tensorflow.tfprof.ExecProfile> execs = 12;
  if (!this->execs().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->execs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->execs().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >::const_iterator
          it = this->execs().begin();
          it != this->execs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_ExecsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(execs_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_ExecsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >::const_iterator
          it = this->execs().begin();
          it != this->execs().end(); ++it) {
        entry.reset(execs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
      }
    }
  }

  // optional int64 id = 13;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->id(), output);
  }

  // map<int64, int32> src_output_index = 14;
  if (!this->src_output_index().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->src_output_index().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->src_output_index().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >::const_iterator
          it = this->src_output_index().begin();
          it != this->src_output_index().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_SrcOutputIndexEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(src_output_index_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            14, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_SrcOutputIndexEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >::const_iterator
          it = this->src_output_index().begin();
          it != this->src_output_index().end(); ++it) {
        entry.reset(src_output_index_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            14, *entry, output);
      }
    }
  }

  // map<int32, .tensorflow.tfprof.Tuple> output_shapes = 15;
  if (!this->output_shapes().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->output_shapes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->output_shapes().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_iterator
          it = this->output_shapes().begin();
          it != this->output_shapes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_OutputShapesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(output_shapes_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_OutputShapesEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_iterator
          it = this->output_shapes().begin();
          it != this->output_shapes().end(); ++it) {
        entry.reset(output_shapes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
      }
    }
  }

  // map<int32, .tensorflow.tfprof.Tuple> input_shapes = 16;
  if (!this->input_shapes().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->input_shapes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->input_shapes().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_iterator
          it = this->input_shapes().begin();
          it != this->input_shapes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_InputShapesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(input_shapes_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            16, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_InputShapesEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_iterator
          it = this->input_shapes().begin();
          it != this->input_shapes().end(); ++it) {
        entry.reset(input_shapes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            16, *entry, output);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.ProfileNode)
}

::google::protobuf::uint8* ProfileNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.ProfileNode)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // map<int32, int64> inputs = 2;
  if (!this->inputs().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->inputs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->inputs().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_InputsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(inputs_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_InputsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it) {
        entry.reset(inputs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, int64> outputs = 3;
  if (!this->outputs().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->outputs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->outputs().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
          it = this->outputs().begin();
          it != this->outputs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_OutputsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(outputs_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_OutputsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
          it = this->outputs().begin();
          it != this->outputs().end(); ++it) {
        entry.reset(outputs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // repeated int64 shape = 4;
  if (this->shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _shape_cached_byte_size_, target);
  }
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->shape(i), target);
  }

  // repeated string op_types = 5;
  for (int i = 0; i < this->op_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op_types(i).data(), this->op_types(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.op_types");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->op_types(i), target);
  }

  // optional string canonical_device = 6;
  if (this->canonical_device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->canonical_device().data(), this->canonical_device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.canonical_device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->canonical_device(), target);
  }

  // optional string host_device = 7;
  if (this->host_device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_device().data(), this->host_device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.host_device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->host_device(), target);
  }

  // optional int64 float_ops = 8;
  if (this->float_ops() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->float_ops(), target);
  }

  // optional string op = 9;
  if (this->op().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->op().data(), this->op().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ProfileNode.op");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->op(), target);
  }

  // optional .tensorflow.tfprof.CodeDef trace = 10;
  if (this->has_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->trace_, false, target);
  }

  // map<string, .tensorflow.AttrValue> attrs = 11;
  if (!this->attrs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.ProfileNode.AttrsEntry.key");
      }
    };

    if (deterministic &&
        this->attrs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attrs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_AttrsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attrs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_AttrsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
          it = this->attrs().begin();
          it != this->attrs().end(); ++it) {
        entry.reset(attrs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<int64, .tensorflow.tfprof.ExecProfile> execs = 12;
  if (!this->execs().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->execs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->execs().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >::const_iterator
          it = this->execs().begin();
          it != this->execs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_ExecsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(execs_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_ExecsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >::const_iterator
          it = this->execs().begin();
          it != this->execs().end(); ++it) {
        entry.reset(execs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
      }
    }
  }

  // optional int64 id = 13;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->id(), target);
  }

  // map<int64, int32> src_output_index = 14;
  if (!this->src_output_index().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->src_output_index().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->src_output_index().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >::const_iterator
          it = this->src_output_index().begin();
          it != this->src_output_index().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_SrcOutputIndexEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(src_output_index_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       14, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_SrcOutputIndexEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >::const_iterator
          it = this->src_output_index().begin();
          it != this->src_output_index().end(); ++it) {
        entry.reset(src_output_index_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       14, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, .tensorflow.tfprof.Tuple> output_shapes = 15;
  if (!this->output_shapes().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->output_shapes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->output_shapes().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_iterator
          it = this->output_shapes().begin();
          it != this->output_shapes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_OutputShapesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(output_shapes_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_OutputShapesEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_iterator
          it = this->output_shapes().begin();
          it != this->output_shapes().end(); ++it) {
        entry.reset(output_shapes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
      }
    }
  }

  // map<int32, .tensorflow.tfprof.Tuple> input_shapes = 16;
  if (!this->input_shapes().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->input_shapes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->input_shapes().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_iterator
          it = this->input_shapes().begin();
          it != this->input_shapes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ProfileNode_InputShapesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(input_shapes_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       16, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ProfileNode_InputShapesEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_iterator
          it = this->input_shapes().begin();
          it != this->input_shapes().end(); ++it) {
        entry.reset(input_shapes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       16, *entry, deterministic, target);
;
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.ProfileNode)
  return target;
}

size_t ProfileNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.ProfileNode)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string op = 9;
  if (this->op().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->op());
  }

  // optional int64 id = 13;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // optional string canonical_device = 6;
  if (this->canonical_device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->canonical_device());
  }

  // optional string host_device = 7;
  if (this->host_device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host_device());
  }

  // optional int64 float_ops = 8;
  if (this->float_ops() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->float_ops());
  }

  // optional .tensorflow.tfprof.CodeDef trace = 10;
  if (this->has_trace()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trace_);
  }

  // map<int32, int64> inputs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->inputs_size());
  {
    ::google::protobuf::scoped_ptr<ProfileNode_InputsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
        it = this->inputs().begin();
        it != this->inputs().end(); ++it) {
      entry.reset(inputs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, .tensorflow.tfprof.Tuple> input_shapes = 16;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->input_shapes_size());
  {
    ::google::protobuf::scoped_ptr<ProfileNode_InputShapesEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_iterator
        it = this->input_shapes().begin();
        it != this->input_shapes().end(); ++it) {
      entry.reset(input_shapes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, int64> outputs = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->outputs_size());
  {
    ::google::protobuf::scoped_ptr<ProfileNode_OutputsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >::const_iterator
        it = this->outputs().begin();
        it != this->outputs().end(); ++it) {
      entry.reset(outputs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, .tensorflow.tfprof.Tuple> output_shapes = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->output_shapes_size());
  {
    ::google::protobuf::scoped_ptr<ProfileNode_OutputShapesEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >::const_iterator
        it = this->output_shapes().begin();
        it != this->output_shapes().end(); ++it) {
      entry.reset(output_shapes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int64, int32> src_output_index = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->src_output_index_size());
  {
    ::google::protobuf::scoped_ptr<ProfileNode_SrcOutputIndexEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >::const_iterator
        it = this->src_output_index().begin();
        it != this->src_output_index().end(); ++it) {
      entry.reset(src_output_index_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated int64 shape = 4;
  {
    size_t data_size = 0;
    unsigned int count = this->shape_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->shape(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _shape_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string op_types = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->op_types_size());
  for (int i = 0; i < this->op_types_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->op_types(i));
  }

  // map<string, .tensorflow.AttrValue> attrs = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attrs_size());
  {
    ::google::protobuf::scoped_ptr<ProfileNode_AttrsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >::const_iterator
        it = this->attrs().begin();
        it != this->attrs().end(); ++it) {
      entry.reset(attrs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int64, .tensorflow.tfprof.ExecProfile> execs = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->execs_size());
  {
    ::google::protobuf::scoped_ptr<ProfileNode_ExecsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >::const_iterator
        it = this->execs().begin();
        it != this->execs().end(); ++it) {
      entry.reset(execs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfileNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.ProfileNode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProfileNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfileNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.ProfileNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.ProfileNode)
    UnsafeMergeFrom(*source);
  }
}

void ProfileNode::MergeFrom(const ProfileNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.ProfileNode)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ProfileNode::UnsafeMergeFrom(const ProfileNode& from) {
  GOOGLE_DCHECK(&from != this);
  inputs_.MergeFrom(from.inputs_);
  input_shapes_.MergeFrom(from.input_shapes_);
  outputs_.MergeFrom(from.outputs_);
  output_shapes_.MergeFrom(from.output_shapes_);
  src_output_index_.MergeFrom(from.src_output_index_);
  shape_.UnsafeMergeFrom(from.shape_);
  op_types_.UnsafeMergeFrom(from.op_types_);
  attrs_.MergeFrom(from.attrs_);
  execs_.MergeFrom(from.execs_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.op().size() > 0) {

    op_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.canonical_device().size() > 0) {

    canonical_device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canonical_device_);
  }
  if (from.host_device().size() > 0) {

    host_device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_device_);
  }
  if (from.float_ops() != 0) {
    set_float_ops(from.float_ops());
  }
  if (from.has_trace()) {
    mutable_trace()->::tensorflow::tfprof::CodeDef::MergeFrom(from.trace());
  }
}

void ProfileNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.ProfileNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileNode::CopyFrom(const ProfileNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.ProfileNode)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ProfileNode::IsInitialized() const {

  return true;
}

void ProfileNode::Swap(ProfileNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfileNode::InternalSwap(ProfileNode* other) {
  name_.Swap(&other->name_);
  op_.Swap(&other->op_);
  std::swap(id_, other->id_);
  inputs_.Swap(&other->inputs_);
  input_shapes_.Swap(&other->input_shapes_);
  outputs_.Swap(&other->outputs_);
  output_shapes_.Swap(&other->output_shapes_);
  src_output_index_.Swap(&other->src_output_index_);
  shape_.UnsafeArenaSwap(&other->shape_);
  op_types_.UnsafeArenaSwap(&other->op_types_);
  canonical_device_.Swap(&other->canonical_device_);
  host_device_.Swap(&other->host_device_);
  std::swap(float_ops_, other->float_ops_);
  std::swap(trace_, other->trace_);
  attrs_.Swap(&other->attrs_);
  execs_.Swap(&other->execs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProfileNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfileNode_descriptor_;
  metadata.reflection = ProfileNode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProfileNode

// optional string name = 1;
void ProfileNode::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProfileNode::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileNode.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProfileNode::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileNode.name)
}
void ProfileNode::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.ProfileNode.name)
}
void ProfileNode::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.ProfileNode.name)
}
::std::string* ProfileNode::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.ProfileNode.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProfileNode::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.ProfileNode.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProfileNode::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.ProfileNode.name)
}

// optional string op = 9;
void ProfileNode::clear_op() {
  op_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProfileNode::op() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileNode.op)
  return op_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProfileNode::set_op(const ::std::string& value) {
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileNode.op)
}
void ProfileNode::set_op(const char* value) {
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.ProfileNode.op)
}
void ProfileNode::set_op(const char* value, size_t size) {
  
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.ProfileNode.op)
}
::std::string* ProfileNode::mutable_op() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.ProfileNode.op)
  return op_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProfileNode::release_op() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.ProfileNode.op)
  
  return op_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProfileNode::set_allocated_op(::std::string* op) {
  if (op != NULL) {
    
  } else {
    
  }
  op_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.ProfileNode.op)
}

// optional int64 id = 13;
void ProfileNode::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ProfileNode::id() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileNode.id)
  return id_;
}
void ProfileNode::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileNode.id)
}

// map<int32, int64> inputs = 2;
int ProfileNode::inputs_size() const {
  return inputs_.size();
}
void ProfileNode::clear_inputs() {
  inputs_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >&
ProfileNode::inputs() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ProfileNode.inputs)
  return inputs_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >*
ProfileNode::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ProfileNode.inputs)
  return inputs_.MutableMap();
}

// map<int32, .tensorflow.tfprof.Tuple> input_shapes = 16;
int ProfileNode::input_shapes_size() const {
  return input_shapes_.size();
}
void ProfileNode::clear_input_shapes() {
  input_shapes_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >&
ProfileNode::input_shapes() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ProfileNode.input_shapes)
  return input_shapes_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >*
ProfileNode::mutable_input_shapes() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ProfileNode.input_shapes)
  return input_shapes_.MutableMap();
}

// map<int32, int64> outputs = 3;
int ProfileNode::outputs_size() const {
  return outputs_.size();
}
void ProfileNode::clear_outputs() {
  outputs_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >&
ProfileNode::outputs() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ProfileNode.outputs)
  return outputs_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int64 >*
ProfileNode::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ProfileNode.outputs)
  return outputs_.MutableMap();
}

// map<int32, .tensorflow.tfprof.Tuple> output_shapes = 15;
int ProfileNode::output_shapes_size() const {
  return output_shapes_.size();
}
void ProfileNode::clear_output_shapes() {
  output_shapes_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >&
ProfileNode::output_shapes() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ProfileNode.output_shapes)
  return output_shapes_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Tuple >*
ProfileNode::mutable_output_shapes() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ProfileNode.output_shapes)
  return output_shapes_.MutableMap();
}

// map<int64, int32> src_output_index = 14;
int ProfileNode::src_output_index_size() const {
  return src_output_index_.size();
}
void ProfileNode::clear_src_output_index() {
  src_output_index_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >&
ProfileNode::src_output_index() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ProfileNode.src_output_index)
  return src_output_index_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int64, ::google::protobuf::int32 >*
ProfileNode::mutable_src_output_index() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ProfileNode.src_output_index)
  return src_output_index_.MutableMap();
}

// repeated int64 shape = 4;
int ProfileNode::shape_size() const {
  return shape_.size();
}
void ProfileNode::clear_shape() {
  shape_.Clear();
}
::google::protobuf::int64 ProfileNode::shape(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileNode.shape)
  return shape_.Get(index);
}
void ProfileNode::set_shape(int index, ::google::protobuf::int64 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileNode.shape)
}
void ProfileNode::add_shape(::google::protobuf::int64 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.ProfileNode.shape)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ProfileNode::shape() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.ProfileNode.shape)
  return shape_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ProfileNode::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.ProfileNode.shape)
  return &shape_;
}

// repeated string op_types = 5;
int ProfileNode::op_types_size() const {
  return op_types_.size();
}
void ProfileNode::clear_op_types() {
  op_types_.Clear();
}
const ::std::string& ProfileNode::op_types(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileNode.op_types)
  return op_types_.Get(index);
}
::std::string* ProfileNode::mutable_op_types(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.ProfileNode.op_types)
  return op_types_.Mutable(index);
}
void ProfileNode::set_op_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileNode.op_types)
  op_types_.Mutable(index)->assign(value);
}
void ProfileNode::set_op_types(int index, const char* value) {
  op_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.ProfileNode.op_types)
}
void ProfileNode::set_op_types(int index, const char* value, size_t size) {
  op_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.ProfileNode.op_types)
}
::std::string* ProfileNode::add_op_types() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.ProfileNode.op_types)
  return op_types_.Add();
}
void ProfileNode::add_op_types(const ::std::string& value) {
  op_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.ProfileNode.op_types)
}
void ProfileNode::add_op_types(const char* value) {
  op_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.ProfileNode.op_types)
}
void ProfileNode::add_op_types(const char* value, size_t size) {
  op_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.ProfileNode.op_types)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProfileNode::op_types() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.ProfileNode.op_types)
  return op_types_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ProfileNode::mutable_op_types() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.ProfileNode.op_types)
  return &op_types_;
}

// optional string canonical_device = 6;
void ProfileNode::clear_canonical_device() {
  canonical_device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProfileNode::canonical_device() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileNode.canonical_device)
  return canonical_device_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProfileNode::set_canonical_device(const ::std::string& value) {
  
  canonical_device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileNode.canonical_device)
}
void ProfileNode::set_canonical_device(const char* value) {
  
  canonical_device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.ProfileNode.canonical_device)
}
void ProfileNode::set_canonical_device(const char* value, size_t size) {
  
  canonical_device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.ProfileNode.canonical_device)
}
::std::string* ProfileNode::mutable_canonical_device() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.ProfileNode.canonical_device)
  return canonical_device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProfileNode::release_canonical_device() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.ProfileNode.canonical_device)
  
  return canonical_device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProfileNode::set_allocated_canonical_device(::std::string* canonical_device) {
  if (canonical_device != NULL) {
    
  } else {
    
  }
  canonical_device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canonical_device);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.ProfileNode.canonical_device)
}

// optional string host_device = 7;
void ProfileNode::clear_host_device() {
  host_device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProfileNode::host_device() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileNode.host_device)
  return host_device_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProfileNode::set_host_device(const ::std::string& value) {
  
  host_device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileNode.host_device)
}
void ProfileNode::set_host_device(const char* value) {
  
  host_device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.ProfileNode.host_device)
}
void ProfileNode::set_host_device(const char* value, size_t size) {
  
  host_device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.ProfileNode.host_device)
}
::std::string* ProfileNode::mutable_host_device() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.ProfileNode.host_device)
  return host_device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProfileNode::release_host_device() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.ProfileNode.host_device)
  
  return host_device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProfileNode::set_allocated_host_device(::std::string* host_device) {
  if (host_device != NULL) {
    
  } else {
    
  }
  host_device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_device);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.ProfileNode.host_device)
}

// optional int64 float_ops = 8;
void ProfileNode::clear_float_ops() {
  float_ops_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ProfileNode::float_ops() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileNode.float_ops)
  return float_ops_;
}
void ProfileNode::set_float_ops(::google::protobuf::int64 value) {
  
  float_ops_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ProfileNode.float_ops)
}

// optional .tensorflow.tfprof.CodeDef trace = 10;
bool ProfileNode::has_trace() const {
  return this != internal_default_instance() && trace_ != NULL;
}
void ProfileNode::clear_trace() {
  if (GetArenaNoVirtual() == NULL && trace_ != NULL) delete trace_;
  trace_ = NULL;
}
const ::tensorflow::tfprof::CodeDef& ProfileNode::trace() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ProfileNode.trace)
  return trace_ != NULL ? *trace_
                         : *::tensorflow::tfprof::CodeDef::internal_default_instance();
}
::tensorflow::tfprof::CodeDef* ProfileNode::mutable_trace() {
  
  if (trace_ == NULL) {
    trace_ = new ::tensorflow::tfprof::CodeDef;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.ProfileNode.trace)
  return trace_;
}
::tensorflow::tfprof::CodeDef* ProfileNode::release_trace() {
  // @@protoc_insertion_point(field_release:tensorflow.tfprof.ProfileNode.trace)
  
  ::tensorflow::tfprof::CodeDef* temp = trace_;
  trace_ = NULL;
  return temp;
}
void ProfileNode::set_allocated_trace(::tensorflow::tfprof::CodeDef* trace) {
  delete trace_;
  trace_ = trace;
  if (trace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tfprof.ProfileNode.trace)
}

// map<string, .tensorflow.AttrValue> attrs = 11;
int ProfileNode::attrs_size() const {
  return attrs_.size();
}
void ProfileNode::clear_attrs() {
  attrs_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >&
ProfileNode::attrs() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ProfileNode.attrs)
  return attrs_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::AttrValue >*
ProfileNode::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ProfileNode.attrs)
  return attrs_.MutableMap();
}

// map<int64, .tensorflow.tfprof.ExecProfile> execs = 12;
int ProfileNode::execs_size() const {
  return execs_.size();
}
void ProfileNode::clear_execs() {
  execs_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >&
ProfileNode::execs() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ProfileNode.execs)
  return execs_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int64, ::tensorflow::tfprof::ExecProfile >*
ProfileNode::mutable_execs() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ProfileNode.execs)
  return execs_.MutableMap();
}

inline const ProfileNode* ProfileNode::internal_default_instance() {
  return &ProfileNode_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecProfile::kRunCountFieldNumber;
const int ExecProfile::kAllStartMicrosFieldNumber;
const int ExecProfile::kLatestEndMicrosFieldNumber;
const int ExecProfile::kAcceleratorExecsFieldNumber;
const int ExecProfile::kCpuExecsFieldNumber;
const int ExecProfile::kOutputMemoryFieldNumber;
const int ExecProfile::kDevicesFieldNumber;
const int ExecProfile::kRequestedBytesFieldNumber;
const int ExecProfile::kPeakBytesFieldNumber;
const int ExecProfile::kResidualBytesFieldNumber;
const int ExecProfile::kOutputBytesFieldNumber;
const int ExecProfile::kHostTempBytesFieldNumber;
const int ExecProfile::kHostPersistentBytesFieldNumber;
const int ExecProfile::kAcceleratorTempBytesFieldNumber;
const int ExecProfile::kAcceleratorPersistentBytesFieldNumber;
const int ExecProfile::kAllocatorBytesInUseFieldNumber;
const int ExecProfile::kMemoryIntializedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecProfile::ExecProfile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.ExecProfile)
}

void ExecProfile::InitAsDefaultInstance() {
}

ExecProfile::ExecProfile(const ExecProfile& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.ExecProfile)
}

void ExecProfile::SharedCtor() {
  accelerator_execs_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  accelerator_execs_.SetEntryDescriptor(
      &::tensorflow::tfprof::ExecProfile_AcceleratorExecsEntry_descriptor_);
  cpu_execs_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  cpu_execs_.SetEntryDescriptor(
      &::tensorflow::tfprof::ExecProfile_CpuExecsEntry_descriptor_);
  output_memory_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  output_memory_.SetEntryDescriptor(
      &::tensorflow::tfprof::ExecProfile_OutputMemoryEntry_descriptor_);
  ::memset(&run_count_, 0, reinterpret_cast<char*>(&memory_intialized_) -
    reinterpret_cast<char*>(&run_count_) + sizeof(memory_intialized_));
  _cached_size_ = 0;
}

ExecProfile::~ExecProfile() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.ExecProfile)
  SharedDtor();
}

void ExecProfile::SharedDtor() {
}

void ExecProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecProfile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecProfile_descriptor_;
}

const ExecProfile& ExecProfile::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ExecProfile> ExecProfile_default_instance_;

ExecProfile* ExecProfile::New(::google::protobuf::Arena* arena) const {
  ExecProfile* n = new ExecProfile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.ExecProfile)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ExecProfile, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ExecProfile*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(run_count_, requested_bytes_);
  ZR_(peak_bytes_, allocator_bytes_in_use_);
  memory_intialized_ = false;

#undef ZR_HELPER_
#undef ZR_

  accelerator_execs_.Clear();
  cpu_execs_.Clear();
  output_memory_.Clear();
  devices_.Clear();
}

bool ExecProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.ExecProfile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 run_count = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &run_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_all_start_micros;
        break;
      }

      // optional int64 all_start_micros = 2;
      case 2: {
        if (tag == 16) {
         parse_all_start_micros:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &all_start_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_latest_end_micros;
        break;
      }

      // optional int64 latest_end_micros = 3;
      case 3: {
        if (tag == 24) {
         parse_latest_end_micros:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &latest_end_micros_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_accelerator_execs;
        break;
      }

      // map<string, .tensorflow.tfprof.ExecTime> accelerator_execs = 4;
      case 4: {
        if (tag == 34) {
         parse_accelerator_execs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_accelerator_execs:
          ExecProfile_AcceleratorExecsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::tensorflow::tfprof::ExecTime,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime > > parser(&accelerator_execs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.ExecProfile.AcceleratorExecsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_accelerator_execs;
        if (input->ExpectTag(42)) goto parse_loop_cpu_execs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<string, .tensorflow.tfprof.ExecTime> cpu_execs = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_cpu_execs:
          ExecProfile_CpuExecsEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::tensorflow::tfprof::ExecTime,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime > > parser(&cpu_execs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.ExecProfile.CpuExecsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_cpu_execs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_devices;
        break;
      }

      // repeated string devices = 6;
      case 6: {
        if (tag == 50) {
         parse_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_devices()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devices(this->devices_size() - 1).data(),
            this->devices(this->devices_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.tfprof.ExecProfile.devices"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_devices;
        if (input->ExpectTag(56)) goto parse_requested_bytes;
        break;
      }

      // optional int64 requested_bytes = 7;
      case 7: {
        if (tag == 56) {
         parse_requested_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &requested_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_peak_bytes;
        break;
      }

      // optional int64 peak_bytes = 8;
      case 8: {
        if (tag == 64) {
         parse_peak_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &peak_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_residual_bytes;
        break;
      }

      // optional int64 residual_bytes = 9;
      case 9: {
        if (tag == 72) {
         parse_residual_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &residual_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_output_bytes;
        break;
      }

      // optional int64 output_bytes = 10;
      case 10: {
        if (tag == 80) {
         parse_output_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &output_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_host_temp_bytes;
        break;
      }

      // optional int64 host_temp_bytes = 11;
      case 11: {
        if (tag == 88) {
         parse_host_temp_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &host_temp_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_host_persistent_bytes;
        break;
      }

      // optional int64 host_persistent_bytes = 12;
      case 12: {
        if (tag == 96) {
         parse_host_persistent_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &host_persistent_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_accelerator_temp_bytes;
        break;
      }

      // optional int64 accelerator_temp_bytes = 13;
      case 13: {
        if (tag == 104) {
         parse_accelerator_temp_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accelerator_temp_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_accelerator_persistent_bytes;
        break;
      }

      // optional int64 accelerator_persistent_bytes = 14;
      case 14: {
        if (tag == 112) {
         parse_accelerator_persistent_bytes:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accelerator_persistent_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_allocator_bytes_in_use;
        break;
      }

      // optional int64 allocator_bytes_in_use = 15;
      case 15: {
        if (tag == 120) {
         parse_allocator_bytes_in_use:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &allocator_bytes_in_use_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_memory_intialized;
        break;
      }

      // optional bool memory_intialized = 16;
      case 16: {
        if (tag == 128) {
         parse_memory_intialized:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &memory_intialized_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_output_memory;
        break;
      }

      // map<int32, .tensorflow.tfprof.Memory> output_memory = 17;
      case 17: {
        if (tag == 138) {
         parse_output_memory:
          DO_(input->IncrementRecursionDepth());
         parse_loop_output_memory:
          ExecProfile_OutputMemoryEntry::Parser< ::google::protobuf::internal::MapField<
              ::google::protobuf::int32, ::tensorflow::tfprof::Memory,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory > > parser(&output_memory_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_loop_output_memory;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.ExecProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.ExecProfile)
  return false;
#undef DO_
}

void ExecProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.ExecProfile)
  // optional int64 run_count = 1;
  if (this->run_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->run_count(), output);
  }

  // optional int64 all_start_micros = 2;
  if (this->all_start_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->all_start_micros(), output);
  }

  // optional int64 latest_end_micros = 3;
  if (this->latest_end_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->latest_end_micros(), output);
  }

  // map<string, .tensorflow.tfprof.ExecTime> accelerator_execs = 4;
  if (!this->accelerator_execs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.ExecProfile.AcceleratorExecsEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->accelerator_execs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->accelerator_execs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
          it = this->accelerator_execs().begin();
          it != this->accelerator_execs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ExecProfile_AcceleratorExecsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(accelerator_execs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ExecProfile_AcceleratorExecsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
          it = this->accelerator_execs().begin();
          it != this->accelerator_execs().end(); ++it) {
        entry.reset(accelerator_execs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .tensorflow.tfprof.ExecTime> cpu_execs = 5;
  if (!this->cpu_execs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.ExecProfile.CpuExecsEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->cpu_execs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->cpu_execs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
          it = this->cpu_execs().begin();
          it != this->cpu_execs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ExecProfile_CpuExecsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cpu_execs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ExecProfile_CpuExecsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
          it = this->cpu_execs().begin();
          it != this->cpu_execs().end(); ++it) {
        entry.reset(cpu_execs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string devices = 6;
  for (int i = 0; i < this->devices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devices(i).data(), this->devices(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ExecProfile.devices");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->devices(i), output);
  }

  // optional int64 requested_bytes = 7;
  if (this->requested_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->requested_bytes(), output);
  }

  // optional int64 peak_bytes = 8;
  if (this->peak_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->peak_bytes(), output);
  }

  // optional int64 residual_bytes = 9;
  if (this->residual_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->residual_bytes(), output);
  }

  // optional int64 output_bytes = 10;
  if (this->output_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->output_bytes(), output);
  }

  // optional int64 host_temp_bytes = 11;
  if (this->host_temp_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->host_temp_bytes(), output);
  }

  // optional int64 host_persistent_bytes = 12;
  if (this->host_persistent_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->host_persistent_bytes(), output);
  }

  // optional int64 accelerator_temp_bytes = 13;
  if (this->accelerator_temp_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->accelerator_temp_bytes(), output);
  }

  // optional int64 accelerator_persistent_bytes = 14;
  if (this->accelerator_persistent_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->accelerator_persistent_bytes(), output);
  }

  // optional int64 allocator_bytes_in_use = 15;
  if (this->allocator_bytes_in_use() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->allocator_bytes_in_use(), output);
  }

  // optional bool memory_intialized = 16;
  if (this->memory_intialized() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->memory_intialized(), output);
  }

  // map<int32, .tensorflow.tfprof.Memory> output_memory = 17;
  if (!this->output_memory().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterminstic() &&
        this->output_memory().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->output_memory().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >::const_iterator
          it = this->output_memory().begin();
          it != this->output_memory().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ExecProfile_OutputMemoryEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(output_memory_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            17, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<ExecProfile_OutputMemoryEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >::const_iterator
          it = this->output_memory().begin();
          it != this->output_memory().end(); ++it) {
        entry.reset(output_memory_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            17, *entry, output);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.ExecProfile)
}

::google::protobuf::uint8* ExecProfile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.ExecProfile)
  // optional int64 run_count = 1;
  if (this->run_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->run_count(), target);
  }

  // optional int64 all_start_micros = 2;
  if (this->all_start_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->all_start_micros(), target);
  }

  // optional int64 latest_end_micros = 3;
  if (this->latest_end_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->latest_end_micros(), target);
  }

  // map<string, .tensorflow.tfprof.ExecTime> accelerator_execs = 4;
  if (!this->accelerator_execs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.ExecProfile.AcceleratorExecsEntry.key");
      }
    };

    if (deterministic &&
        this->accelerator_execs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->accelerator_execs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
          it = this->accelerator_execs().begin();
          it != this->accelerator_execs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ExecProfile_AcceleratorExecsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(accelerator_execs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ExecProfile_AcceleratorExecsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
          it = this->accelerator_execs().begin();
          it != this->accelerator_execs().end(); ++it) {
        entry.reset(accelerator_execs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .tensorflow.tfprof.ExecTime> cpu_execs = 5;
  if (!this->cpu_execs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "tensorflow.tfprof.ExecProfile.CpuExecsEntry.key");
      }
    };

    if (deterministic &&
        this->cpu_execs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->cpu_execs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
          it = this->cpu_execs().begin();
          it != this->cpu_execs().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ExecProfile_CpuExecsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cpu_execs_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ExecProfile_CpuExecsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
          it = this->cpu_execs().begin();
          it != this->cpu_execs().end(); ++it) {
        entry.reset(cpu_execs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // repeated string devices = 6;
  for (int i = 0; i < this->devices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devices(i).data(), this->devices(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tfprof.ExecProfile.devices");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->devices(i), target);
  }

  // optional int64 requested_bytes = 7;
  if (this->requested_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->requested_bytes(), target);
  }

  // optional int64 peak_bytes = 8;
  if (this->peak_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->peak_bytes(), target);
  }

  // optional int64 residual_bytes = 9;
  if (this->residual_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->residual_bytes(), target);
  }

  // optional int64 output_bytes = 10;
  if (this->output_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->output_bytes(), target);
  }

  // optional int64 host_temp_bytes = 11;
  if (this->host_temp_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->host_temp_bytes(), target);
  }

  // optional int64 host_persistent_bytes = 12;
  if (this->host_persistent_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->host_persistent_bytes(), target);
  }

  // optional int64 accelerator_temp_bytes = 13;
  if (this->accelerator_temp_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->accelerator_temp_bytes(), target);
  }

  // optional int64 accelerator_persistent_bytes = 14;
  if (this->accelerator_persistent_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->accelerator_persistent_bytes(), target);
  }

  // optional int64 allocator_bytes_in_use = 15;
  if (this->allocator_bytes_in_use() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->allocator_bytes_in_use(), target);
  }

  // optional bool memory_intialized = 16;
  if (this->memory_intialized() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->memory_intialized(), target);
  }

  // map<int32, .tensorflow.tfprof.Memory> output_memory = 17;
  if (!this->output_memory().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->output_memory().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->output_memory().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >::const_iterator
          it = this->output_memory().begin();
          it != this->output_memory().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ExecProfile_OutputMemoryEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(output_memory_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       17, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<ExecProfile_OutputMemoryEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >::const_iterator
          it = this->output_memory().begin();
          it != this->output_memory().end(); ++it) {
        entry.reset(output_memory_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       17, *entry, deterministic, target);
;
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.ExecProfile)
  return target;
}

size_t ExecProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.ExecProfile)
  size_t total_size = 0;

  // optional int64 run_count = 1;
  if (this->run_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->run_count());
  }

  // optional int64 all_start_micros = 2;
  if (this->all_start_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->all_start_micros());
  }

  // optional int64 latest_end_micros = 3;
  if (this->latest_end_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->latest_end_micros());
  }

  // optional int64 requested_bytes = 7;
  if (this->requested_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->requested_bytes());
  }

  // optional int64 peak_bytes = 8;
  if (this->peak_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->peak_bytes());
  }

  // optional int64 residual_bytes = 9;
  if (this->residual_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->residual_bytes());
  }

  // optional int64 output_bytes = 10;
  if (this->output_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->output_bytes());
  }

  // optional int64 host_temp_bytes = 11;
  if (this->host_temp_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->host_temp_bytes());
  }

  // optional int64 host_persistent_bytes = 12;
  if (this->host_persistent_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->host_persistent_bytes());
  }

  // optional int64 accelerator_temp_bytes = 13;
  if (this->accelerator_temp_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->accelerator_temp_bytes());
  }

  // optional int64 accelerator_persistent_bytes = 14;
  if (this->accelerator_persistent_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->accelerator_persistent_bytes());
  }

  // optional int64 allocator_bytes_in_use = 15;
  if (this->allocator_bytes_in_use() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->allocator_bytes_in_use());
  }

  // optional bool memory_intialized = 16;
  if (this->memory_intialized() != 0) {
    total_size += 2 + 1;
  }

  // map<string, .tensorflow.tfprof.ExecTime> accelerator_execs = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->accelerator_execs_size());
  {
    ::google::protobuf::scoped_ptr<ExecProfile_AcceleratorExecsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
        it = this->accelerator_execs().begin();
        it != this->accelerator_execs().end(); ++it) {
      entry.reset(accelerator_execs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .tensorflow.tfprof.ExecTime> cpu_execs = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->cpu_execs_size());
  {
    ::google::protobuf::scoped_ptr<ExecProfile_CpuExecsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >::const_iterator
        it = this->cpu_execs().begin();
        it != this->cpu_execs().end(); ++it) {
      entry.reset(cpu_execs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<int32, .tensorflow.tfprof.Memory> output_memory = 17;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->output_memory_size());
  {
    ::google::protobuf::scoped_ptr<ExecProfile_OutputMemoryEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >::const_iterator
        it = this->output_memory().begin();
        it != this->output_memory().end(); ++it) {
      entry.reset(output_memory_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated string devices = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->devices_size());
  for (int i = 0; i < this->devices_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->devices(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecProfile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.ExecProfile)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExecProfile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecProfile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.ExecProfile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.ExecProfile)
    UnsafeMergeFrom(*source);
  }
}

void ExecProfile::MergeFrom(const ExecProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.ExecProfile)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ExecProfile::UnsafeMergeFrom(const ExecProfile& from) {
  GOOGLE_DCHECK(&from != this);
  accelerator_execs_.MergeFrom(from.accelerator_execs_);
  cpu_execs_.MergeFrom(from.cpu_execs_);
  output_memory_.MergeFrom(from.output_memory_);
  devices_.UnsafeMergeFrom(from.devices_);
  if (from.run_count() != 0) {
    set_run_count(from.run_count());
  }
  if (from.all_start_micros() != 0) {
    set_all_start_micros(from.all_start_micros());
  }
  if (from.latest_end_micros() != 0) {
    set_latest_end_micros(from.latest_end_micros());
  }
  if (from.requested_bytes() != 0) {
    set_requested_bytes(from.requested_bytes());
  }
  if (from.peak_bytes() != 0) {
    set_peak_bytes(from.peak_bytes());
  }
  if (from.residual_bytes() != 0) {
    set_residual_bytes(from.residual_bytes());
  }
  if (from.output_bytes() != 0) {
    set_output_bytes(from.output_bytes());
  }
  if (from.host_temp_bytes() != 0) {
    set_host_temp_bytes(from.host_temp_bytes());
  }
  if (from.host_persistent_bytes() != 0) {
    set_host_persistent_bytes(from.host_persistent_bytes());
  }
  if (from.accelerator_temp_bytes() != 0) {
    set_accelerator_temp_bytes(from.accelerator_temp_bytes());
  }
  if (from.accelerator_persistent_bytes() != 0) {
    set_accelerator_persistent_bytes(from.accelerator_persistent_bytes());
  }
  if (from.allocator_bytes_in_use() != 0) {
    set_allocator_bytes_in_use(from.allocator_bytes_in_use());
  }
  if (from.memory_intialized() != 0) {
    set_memory_intialized(from.memory_intialized());
  }
}

void ExecProfile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.ExecProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecProfile::CopyFrom(const ExecProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.ExecProfile)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ExecProfile::IsInitialized() const {

  return true;
}

void ExecProfile::Swap(ExecProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecProfile::InternalSwap(ExecProfile* other) {
  std::swap(run_count_, other->run_count_);
  std::swap(all_start_micros_, other->all_start_micros_);
  std::swap(latest_end_micros_, other->latest_end_micros_);
  accelerator_execs_.Swap(&other->accelerator_execs_);
  cpu_execs_.Swap(&other->cpu_execs_);
  output_memory_.Swap(&other->output_memory_);
  devices_.UnsafeArenaSwap(&other->devices_);
  std::swap(requested_bytes_, other->requested_bytes_);
  std::swap(peak_bytes_, other->peak_bytes_);
  std::swap(residual_bytes_, other->residual_bytes_);
  std::swap(output_bytes_, other->output_bytes_);
  std::swap(host_temp_bytes_, other->host_temp_bytes_);
  std::swap(host_persistent_bytes_, other->host_persistent_bytes_);
  std::swap(accelerator_temp_bytes_, other->accelerator_temp_bytes_);
  std::swap(accelerator_persistent_bytes_, other->accelerator_persistent_bytes_);
  std::swap(allocator_bytes_in_use_, other->allocator_bytes_in_use_);
  std::swap(memory_intialized_, other->memory_intialized_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecProfile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecProfile_descriptor_;
  metadata.reflection = ExecProfile_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecProfile

// optional int64 run_count = 1;
void ExecProfile::clear_run_count() {
  run_count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecProfile::run_count() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecProfile.run_count)
  return run_count_;
}
void ExecProfile::set_run_count(::google::protobuf::int64 value) {
  
  run_count_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecProfile.run_count)
}

// optional int64 all_start_micros = 2;
void ExecProfile::clear_all_start_micros() {
  all_start_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecProfile::all_start_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecProfile.all_start_micros)
  return all_start_micros_;
}
void ExecProfile::set_all_start_micros(::google::protobuf::int64 value) {
  
  all_start_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecProfile.all_start_micros)
}

// optional int64 latest_end_micros = 3;
void ExecProfile::clear_latest_end_micros() {
  latest_end_micros_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecProfile::latest_end_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecProfile.latest_end_micros)
  return latest_end_micros_;
}
void ExecProfile::set_latest_end_micros(::google::protobuf::int64 value) {
  
  latest_end_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecProfile.latest_end_micros)
}

// map<string, .tensorflow.tfprof.ExecTime> accelerator_execs = 4;
int ExecProfile::accelerator_execs_size() const {
  return accelerator_execs_.size();
}
void ExecProfile::clear_accelerator_execs() {
  accelerator_execs_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >&
ExecProfile::accelerator_execs() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ExecProfile.accelerator_execs)
  return accelerator_execs_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >*
ExecProfile::mutable_accelerator_execs() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ExecProfile.accelerator_execs)
  return accelerator_execs_.MutableMap();
}

// map<string, .tensorflow.tfprof.ExecTime> cpu_execs = 5;
int ExecProfile::cpu_execs_size() const {
  return cpu_execs_.size();
}
void ExecProfile::clear_cpu_execs() {
  cpu_execs_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >&
ExecProfile::cpu_execs() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ExecProfile.cpu_execs)
  return cpu_execs_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::tensorflow::tfprof::ExecTime >*
ExecProfile::mutable_cpu_execs() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ExecProfile.cpu_execs)
  return cpu_execs_.MutableMap();
}

// map<int32, .tensorflow.tfprof.Memory> output_memory = 17;
int ExecProfile::output_memory_size() const {
  return output_memory_.size();
}
void ExecProfile::clear_output_memory() {
  output_memory_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >&
ExecProfile::output_memory() const {
  // @@protoc_insertion_point(field_map:tensorflow.tfprof.ExecProfile.output_memory)
  return output_memory_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::tensorflow::tfprof::Memory >*
ExecProfile::mutable_output_memory() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.tfprof.ExecProfile.output_memory)
  return output_memory_.MutableMap();
}

// repeated string devices = 6;
int ExecProfile::devices_size() const {
  return devices_.size();
}
void ExecProfile::clear_devices() {
  devices_.Clear();
}
const ::std::string& ExecProfile::devices(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecProfile.devices)
  return devices_.Get(index);
}
::std::string* ExecProfile::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.ExecProfile.devices)
  return devices_.Mutable(index);
}
void ExecProfile::set_devices(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecProfile.devices)
  devices_.Mutable(index)->assign(value);
}
void ExecProfile::set_devices(int index, const char* value) {
  devices_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.tfprof.ExecProfile.devices)
}
void ExecProfile::set_devices(int index, const char* value, size_t size) {
  devices_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.tfprof.ExecProfile.devices)
}
::std::string* ExecProfile::add_devices() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.tfprof.ExecProfile.devices)
  return devices_.Add();
}
void ExecProfile::add_devices(const ::std::string& value) {
  devices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.ExecProfile.devices)
}
void ExecProfile::add_devices(const char* value) {
  devices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.tfprof.ExecProfile.devices)
}
void ExecProfile::add_devices(const char* value, size_t size) {
  devices_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.tfprof.ExecProfile.devices)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExecProfile::devices() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.ExecProfile.devices)
  return devices_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ExecProfile::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.ExecProfile.devices)
  return &devices_;
}

// optional int64 requested_bytes = 7;
void ExecProfile::clear_requested_bytes() {
  requested_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecProfile::requested_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecProfile.requested_bytes)
  return requested_bytes_;
}
void ExecProfile::set_requested_bytes(::google::protobuf::int64 value) {
  
  requested_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecProfile.requested_bytes)
}

// optional int64 peak_bytes = 8;
void ExecProfile::clear_peak_bytes() {
  peak_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecProfile::peak_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecProfile.peak_bytes)
  return peak_bytes_;
}
void ExecProfile::set_peak_bytes(::google::protobuf::int64 value) {
  
  peak_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecProfile.peak_bytes)
}

// optional int64 residual_bytes = 9;
void ExecProfile::clear_residual_bytes() {
  residual_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecProfile::residual_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecProfile.residual_bytes)
  return residual_bytes_;
}
void ExecProfile::set_residual_bytes(::google::protobuf::int64 value) {
  
  residual_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecProfile.residual_bytes)
}

// optional int64 output_bytes = 10;
void ExecProfile::clear_output_bytes() {
  output_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecProfile::output_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecProfile.output_bytes)
  return output_bytes_;
}
void ExecProfile::set_output_bytes(::google::protobuf::int64 value) {
  
  output_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecProfile.output_bytes)
}

// optional int64 host_temp_bytes = 11;
void ExecProfile::clear_host_temp_bytes() {
  host_temp_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecProfile::host_temp_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecProfile.host_temp_bytes)
  return host_temp_bytes_;
}
void ExecProfile::set_host_temp_bytes(::google::protobuf::int64 value) {
  
  host_temp_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecProfile.host_temp_bytes)
}

// optional int64 host_persistent_bytes = 12;
void ExecProfile::clear_host_persistent_bytes() {
  host_persistent_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecProfile::host_persistent_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecProfile.host_persistent_bytes)
  return host_persistent_bytes_;
}
void ExecProfile::set_host_persistent_bytes(::google::protobuf::int64 value) {
  
  host_persistent_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecProfile.host_persistent_bytes)
}

// optional int64 accelerator_temp_bytes = 13;
void ExecProfile::clear_accelerator_temp_bytes() {
  accelerator_temp_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecProfile::accelerator_temp_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecProfile.accelerator_temp_bytes)
  return accelerator_temp_bytes_;
}
void ExecProfile::set_accelerator_temp_bytes(::google::protobuf::int64 value) {
  
  accelerator_temp_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecProfile.accelerator_temp_bytes)
}

// optional int64 accelerator_persistent_bytes = 14;
void ExecProfile::clear_accelerator_persistent_bytes() {
  accelerator_persistent_bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecProfile::accelerator_persistent_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecProfile.accelerator_persistent_bytes)
  return accelerator_persistent_bytes_;
}
void ExecProfile::set_accelerator_persistent_bytes(::google::protobuf::int64 value) {
  
  accelerator_persistent_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecProfile.accelerator_persistent_bytes)
}

// optional int64 allocator_bytes_in_use = 15;
void ExecProfile::clear_allocator_bytes_in_use() {
  allocator_bytes_in_use_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ExecProfile::allocator_bytes_in_use() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecProfile.allocator_bytes_in_use)
  return allocator_bytes_in_use_;
}
void ExecProfile::set_allocator_bytes_in_use(::google::protobuf::int64 value) {
  
  allocator_bytes_in_use_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecProfile.allocator_bytes_in_use)
}

// optional bool memory_intialized = 16;
void ExecProfile::clear_memory_intialized() {
  memory_intialized_ = false;
}
bool ExecProfile::memory_intialized() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecProfile.memory_intialized)
  return memory_intialized_;
}
void ExecProfile::set_memory_intialized(bool value) {
  
  memory_intialized_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.ExecProfile.memory_intialized)
}

inline const ExecProfile* ExecProfile::internal_default_instance() {
  return &ExecProfile_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecTime::kTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecTime::ExecTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.ExecTime)
}

void ExecTime::InitAsDefaultInstance() {
}

ExecTime::ExecTime(const ExecTime& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.ExecTime)
}

void ExecTime::SharedCtor() {
  _cached_size_ = 0;
}

ExecTime::~ExecTime() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.ExecTime)
  SharedDtor();
}

void ExecTime::SharedDtor() {
}

void ExecTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecTime_descriptor_;
}

const ExecTime& ExecTime::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ExecTime> ExecTime_default_instance_;

ExecTime* ExecTime::New(::google::protobuf::Arena* arena) const {
  ExecTime* n = new ExecTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecTime::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.ExecTime)
  times_.Clear();
}

bool ExecTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.ExecTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.tfprof.Tuple times = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_times:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_times()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_times;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.ExecTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.ExecTime)
  return false;
#undef DO_
}

void ExecTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.ExecTime)
  // repeated .tensorflow.tfprof.Tuple times = 1;
  for (unsigned int i = 0, n = this->times_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->times(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.ExecTime)
}

::google::protobuf::uint8* ExecTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.ExecTime)
  // repeated .tensorflow.tfprof.Tuple times = 1;
  for (unsigned int i = 0, n = this->times_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->times(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.ExecTime)
  return target;
}

size_t ExecTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.ExecTime)
  size_t total_size = 0;

  // repeated .tensorflow.tfprof.Tuple times = 1;
  {
    unsigned int count = this->times_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->times(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.ExecTime)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExecTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.ExecTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.ExecTime)
    UnsafeMergeFrom(*source);
  }
}

void ExecTime::MergeFrom(const ExecTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.ExecTime)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ExecTime::UnsafeMergeFrom(const ExecTime& from) {
  GOOGLE_DCHECK(&from != this);
  times_.MergeFrom(from.times_);
}

void ExecTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.ExecTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecTime::CopyFrom(const ExecTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.ExecTime)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ExecTime::IsInitialized() const {

  return true;
}

void ExecTime::Swap(ExecTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecTime::InternalSwap(ExecTime* other) {
  times_.UnsafeArenaSwap(&other->times_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecTime_descriptor_;
  metadata.reflection = ExecTime_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecTime

// repeated .tensorflow.tfprof.Tuple times = 1;
int ExecTime::times_size() const {
  return times_.size();
}
void ExecTime::clear_times() {
  times_.Clear();
}
const ::tensorflow::tfprof::Tuple& ExecTime::times(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.ExecTime.times)
  return times_.Get(index);
}
::tensorflow::tfprof::Tuple* ExecTime::mutable_times(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tfprof.ExecTime.times)
  return times_.Mutable(index);
}
::tensorflow::tfprof::Tuple* ExecTime::add_times() {
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.ExecTime.times)
  return times_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::Tuple >*
ExecTime::mutable_times() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.ExecTime.times)
  return &times_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::tfprof::Tuple >&
ExecTime::times() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.ExecTime.times)
  return times_;
}

inline const ExecTime* ExecTime::internal_default_instance() {
  return &ExecTime_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tuple::kInt64ValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tuple::Tuple()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.Tuple)
}

void Tuple::InitAsDefaultInstance() {
}

Tuple::Tuple(const Tuple& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.Tuple)
}

void Tuple::SharedCtor() {
  _cached_size_ = 0;
}

Tuple::~Tuple() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.Tuple)
  SharedDtor();
}

void Tuple::SharedDtor() {
}

void Tuple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tuple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tuple_descriptor_;
}

const Tuple& Tuple::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Tuple> Tuple_default_instance_;

Tuple* Tuple::New(::google::protobuf::Arena* arena) const {
  Tuple* n = new Tuple;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tuple::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.Tuple)
  int64_values_.Clear();
}

bool Tuple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.Tuple)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 int64_values = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_int64_values())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_int64_values())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.Tuple)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.Tuple)
  return false;
#undef DO_
}

void Tuple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.Tuple)
  // repeated int64 int64_values = 1;
  if (this->int64_values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_int64_values_cached_byte_size_);
  }
  for (int i = 0; i < this->int64_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->int64_values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.Tuple)
}

::google::protobuf::uint8* Tuple::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.Tuple)
  // repeated int64 int64_values = 1;
  if (this->int64_values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _int64_values_cached_byte_size_, target);
  }
  for (int i = 0; i < this->int64_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->int64_values(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.Tuple)
  return target;
}

size_t Tuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.Tuple)
  size_t total_size = 0;

  // repeated int64 int64_values = 1;
  {
    size_t data_size = 0;
    unsigned int count = this->int64_values_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->int64_values(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _int64_values_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tuple::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.Tuple)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Tuple* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tuple>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.Tuple)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.Tuple)
    UnsafeMergeFrom(*source);
  }
}

void Tuple::MergeFrom(const Tuple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.Tuple)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Tuple::UnsafeMergeFrom(const Tuple& from) {
  GOOGLE_DCHECK(&from != this);
  int64_values_.UnsafeMergeFrom(from.int64_values_);
}

void Tuple::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.Tuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tuple::CopyFrom(const Tuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.Tuple)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Tuple::IsInitialized() const {

  return true;
}

void Tuple::Swap(Tuple* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tuple::InternalSwap(Tuple* other) {
  int64_values_.UnsafeArenaSwap(&other->int64_values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Tuple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tuple_descriptor_;
  metadata.reflection = Tuple_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Tuple

// repeated int64 int64_values = 1;
int Tuple::int64_values_size() const {
  return int64_values_.size();
}
void Tuple::clear_int64_values() {
  int64_values_.Clear();
}
::google::protobuf::int64 Tuple::int64_values(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.Tuple.int64_values)
  return int64_values_.Get(index);
}
void Tuple::set_int64_values(int index, ::google::protobuf::int64 value) {
  int64_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.Tuple.int64_values)
}
void Tuple::add_int64_values(::google::protobuf::int64 value) {
  int64_values_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.tfprof.Tuple.int64_values)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Tuple::int64_values() const {
  // @@protoc_insertion_point(field_list:tensorflow.tfprof.Tuple.int64_values)
  return int64_values_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Tuple::mutable_int64_values() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tfprof.Tuple.int64_values)
  return &int64_values_;
}

inline const Tuple* Tuple::internal_default_instance() {
  return &Tuple_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Memory::kBytesFieldNumber;
const int Memory::kPtrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Memory::Memory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.tfprof.Memory)
}

void Memory::InitAsDefaultInstance() {
}

Memory::Memory(const Memory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tfprof.Memory)
}

void Memory::SharedCtor() {
  ::memset(&bytes_, 0, reinterpret_cast<char*>(&ptr_) -
    reinterpret_cast<char*>(&bytes_) + sizeof(ptr_));
  _cached_size_ = 0;
}

Memory::~Memory() {
  // @@protoc_insertion_point(destructor:tensorflow.tfprof.Memory)
  SharedDtor();
}

void Memory::SharedDtor() {
}

void Memory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Memory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Memory_descriptor_;
}

const Memory& Memory::default_instance() {
  protobuf_InitDefaults_tensorflow_2fcore_2fprofiler_2ftfprof_5flog_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Memory> Memory_default_instance_;

Memory* Memory::New(::google::protobuf::Arena* arena) const {
  Memory* n = new Memory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Memory::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tfprof.Memory)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Memory, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Memory*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(bytes_, ptr_);

#undef ZR_HELPER_
#undef ZR_

}

bool Memory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.tfprof.Memory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 bytes = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ptr;
        break;
      }

      // optional uint64 ptr = 2;
      case 2: {
        if (tag == 16) {
         parse_ptr:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ptr_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.tfprof.Memory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.tfprof.Memory)
  return false;
#undef DO_
}

void Memory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.tfprof.Memory)
  // optional int64 bytes = 1;
  if (this->bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->bytes(), output);
  }

  // optional uint64 ptr = 2;
  if (this->ptr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ptr(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.tfprof.Memory)
}

::google::protobuf::uint8* Memory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tfprof.Memory)
  // optional int64 bytes = 1;
  if (this->bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->bytes(), target);
  }

  // optional uint64 ptr = 2;
  if (this->ptr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ptr(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tfprof.Memory)
  return target;
}

size_t Memory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tfprof.Memory)
  size_t total_size = 0;

  // optional int64 bytes = 1;
  if (this->bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bytes());
  }

  // optional uint64 ptr = 2;
  if (this->ptr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ptr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Memory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.tfprof.Memory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Memory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Memory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.tfprof.Memory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.tfprof.Memory)
    UnsafeMergeFrom(*source);
  }
}

void Memory::MergeFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tfprof.Memory)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Memory::UnsafeMergeFrom(const Memory& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.bytes() != 0) {
    set_bytes(from.bytes());
  }
  if (from.ptr() != 0) {
    set_ptr(from.ptr());
  }
}

void Memory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.tfprof.Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Memory::CopyFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tfprof.Memory)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Memory::IsInitialized() const {

  return true;
}

void Memory::Swap(Memory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Memory::InternalSwap(Memory* other) {
  std::swap(bytes_, other->bytes_);
  std::swap(ptr_, other->ptr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Memory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Memory_descriptor_;
  metadata.reflection = Memory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Memory

// optional int64 bytes = 1;
void Memory::clear_bytes() {
  bytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Memory::bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.Memory.bytes)
  return bytes_;
}
void Memory::set_bytes(::google::protobuf::int64 value) {
  
  bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.Memory.bytes)
}

// optional uint64 ptr = 2;
void Memory::clear_ptr() {
  ptr_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Memory::ptr() const {
  // @@protoc_insertion_point(field_get:tensorflow.tfprof.Memory.ptr)
  return ptr_;
}
void Memory::set_ptr(::google::protobuf::uint64 value) {
  
  ptr_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.tfprof.Memory.ptr)
}

inline const Memory* Memory::internal_default_instance() {
  return &Memory_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tfprof
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
